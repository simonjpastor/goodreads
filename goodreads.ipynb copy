{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = pd.read_csv(\"goodreads_library_export2.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Book Id', 'Title', 'Author', 'Author l-f', 'Additional Authors',\n",
       "       'ISBN', 'ISBN13', 'My Rating', 'Average Rating', 'Publisher', 'Binding',\n",
       "       'Number of Pages', 'Year Published', 'Original Publication Year',\n",
       "       'Date Read', 'Date Added', 'Bookshelves', 'Bookshelves with positions',\n",
       "       'Exclusive Shelf', 'My Review', 'Spoiler', 'Private Notes',\n",
       "       'Read Count', 'Recommended For', 'Recommended By', 'Owned Copies',\n",
       "       'Original Purchase Date', 'Original Purchase Location', 'Condition',\n",
       "       'Condition Description', 'BCID'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 762,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "books.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(18,9))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_title(\"# of Books in Library per Author\",fontsize=20)\n",
    "order = books[\"Author\"].value_counts().head(10).index\n",
    "sns.countplot(x=books[\"Author\"],order=order)\n",
    "ax.set_xlabel('Author',fontsize = 15) #xlabel\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "fig.savefig('books_author.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 764,
   "metadata": {},
   "outputs": [],
   "source": [
    "books[\"Year Published\"].fillna(2001,inplace=True)\n",
    "books[\"Year Published\"] = books[\"Year Published\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 765,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Author</th>\n",
       "      <th>Number of Pages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>276</th>\n",
       "      <td>In Search of Lost Time (6 Volumes)</td>\n",
       "      <td>Marcel Proust</td>\n",
       "      <td>4211.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>291</th>\n",
       "      <td>The Man Without Qualities</td>\n",
       "      <td>Robert Musil</td>\n",
       "      <td>1774.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>War and Peace</td>\n",
       "      <td>Leo Tolstoy</td>\n",
       "      <td>1392.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>The Count of Monte Cristo</td>\n",
       "      <td>Alexandre Dumas</td>\n",
       "      <td>1276.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>Don Quixote</td>\n",
       "      <td>Miguel de Cervantes Saavedra</td>\n",
       "      <td>1023.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>Less and More: The Design Ethos of Dieter Rams</td>\n",
       "      <td>Klaus Klemp</td>\n",
       "      <td>808.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123</th>\n",
       "      <td>The City in History: Its Origins, Its Transfor...</td>\n",
       "      <td>Lewis Mumford</td>\n",
       "      <td>784.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>A Promised Land</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>768.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>The Second Sex</td>\n",
       "      <td>Simone de Beauvoir</td>\n",
       "      <td>746.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>The Search For Modern China</td>\n",
       "      <td>Jonathan D. Spence</td>\n",
       "      <td>730.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Title  \\\n",
       "276                 In Search of Lost Time (6 Volumes)   \n",
       "291                          The Man Without Qualities   \n",
       "281                                      War and Peace   \n",
       "78                           The Count of Monte Cristo   \n",
       "280                                        Don Quixote   \n",
       "125     Less and More: The Design Ethos of Dieter Rams   \n",
       "123  The City in History: Its Origins, Its Transfor...   \n",
       "98                                     A Promised Land   \n",
       "270                                     The Second Sex   \n",
       "71                         The Search For Modern China   \n",
       "\n",
       "                           Author  Number of Pages  \n",
       "276                 Marcel Proust           4211.0  \n",
       "291                  Robert Musil           1774.0  \n",
       "281                   Leo Tolstoy           1392.0  \n",
       "78                Alexandre Dumas           1276.0  \n",
       "280  Miguel de Cervantes Saavedra           1023.0  \n",
       "125                   Klaus Klemp            808.0  \n",
       "123                 Lewis Mumford            784.0  \n",
       "98                   Barack Obama            768.0  \n",
       "270            Simone de Beauvoir            746.0  \n",
       "71             Jonathan D. Spence            730.0  "
      ]
     },
     "execution_count": 765,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "books.nlargest(10,\"Number of Pages\")[[\"Title\",\"Author\",\"Number of Pages\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 2160x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(30,12))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_title(\"# of Books per Year Published\",fontsize=20)\n",
    "sns.distplot(books[\"Number of Pages\"])\n",
    "ax.set_xlabel('Year Published',fontsize = 15) #xlabel\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "fig.savefig('books_year.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 767,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(30,12))\n",
    "ax = fig.add_subplot(111)\n",
    "ax.set_title(\"# of Books per Year Published\",fontsize=20)\n",
    "sns.countplot(books[\"Year Published\"])\n",
    "ax.set_xlabel('Year Published',fontsize = 15) #xlabel\n",
    "ax.set_ylabel('Count', fontsize = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "books = books.drop(['Recommended For', 'Recommended By', 'Owned Copies',\"Additional Authors\",\n",
    "       'Original Purchase Date', 'Original Purchase Location', 'Condition',\n",
    "       'Condition Description', 'BCID',\"Bookshelves\",\"Bookshelves with positions\",\"My Review\",\"Author l-f\",\"ISBN13\",\"Spoiler\",\"Private Notes\"],axis=\"columns\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "metadata": {},
   "outputs": [],
   "source": [
    "id1 = []\n",
    "for i in books[\"ISBN\"]: \n",
    "    i = i[2:]\n",
    "    i =(i[:-1])\n",
    "    id1.append(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adding Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Google API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests #we import the requests library (to simulate our HTTP request)\n",
    "categories = []\n",
    "ratings_count = []\n",
    "for i in id1: #id1 contains all of the ISBNs, we thus iterate over the list to get the information for each book\n",
    "    if len(i) > 0: \n",
    "        soup = requests.get(f\"https://www.googleapis.com/books/v1/volumes?q=isbn:{i}\").json() \n",
    "        #this returns our result in a json format\n",
    "        try:\n",
    "            #because some of the books do not seem to have ratingsCount or Categorie, they return Errors. \n",
    "            #We use try and except to prevent the entire program from crashing every time one of the books does not \n",
    "            #have a ratingsCount or Categorie.\n",
    "            ratings_count.append(soup[\"items\"][0][\"volumeInfo\"][\"ratingsCount\"]) #This returns the book's RatingCount\n",
    "        except KeyError:\n",
    "            ratings_count.append(0) #We add 0 if there are none to keep the order of our books intact\n",
    "        try:\n",
    "            categories.append(soup[\"items\"][0][\"volumeInfo\"][\"categories\"][0].lstrip().lower()) #returns the Categorie\n",
    "        except KeyError:\n",
    "            categories.append(0)\n",
    "    else:\n",
    "        ratings_count.append(0)\n",
    "        categories.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "books[\"Reviews\"] = books[\"Publisher\"]\n",
    "books[\"Categories\"] = books[\"Publisher\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0,len(books[\"Reviews\"])):\n",
    "    books[\"Reviews\"][i] = ratings_count[i]\n",
    "    books[\"Categories\"][i] = categories[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "books[[\"Title\",\"Author\",\"Reviews\",\"Categories\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scrape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two options: Scraping as done below, or with api and the following link :) https://www.goodreads.com/book/isbn/0446694975?key=xQXvrwOTLq7xonOLcjt2A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests #We'll use requests to simulate our browser's HTML request\n",
    "from bs4 import BeautifulSoup #We'll use BeautifulSoup to parse the HTML "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_maker():#1st we have to generate the Book's URL by adding its ID\n",
    "    for i in ids:\n",
    "        url = f'https://www.goodreads.com/book/show/{i}'\n",
    "        soup_maker(url) #we then call this function for each URL "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "more_categories = []\n",
    "def soup_maker(url): #this function collects the book's genres \n",
    "    prov_list = []\n",
    "    response = requests.get(url) #we get the HTML code\n",
    "    soup = BeautifulSoup(response.content, \"html.parser\") #we parse it\n",
    "    for i in soup.find_all(class_=\"elementList\"): #where the genres are-\n",
    "        prov_list.append(i.find('a').text) #-located in the HTML code\n",
    "    prov_list = list(dict.fromkeys(prov_list)) #remove list duplicates\n",
    "    prov_list = list(filter(None, prov_list)) #remove empty values\n",
    "    more_categories.append(prov_list)\n",
    "    return more_categories #we return our list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "url_maker() #we now simply have to call our 1st function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "more_categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "response = requests.get(\"https://www.goodreads.com/book/show/5111\")\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n",
    "print(soup) #simply looking at one of the books that generated\n",
    "#empty categories, we realize that the page's HTML code was very weird"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids=[]\n",
    "for i in books[\"Book Id\"]:\n",
    "    ids.append(i) #obtaining the book's individual IDs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [],
   "source": [
    "genreExceptions = [\n",
    "'to-read', 'currently-reading', 'owned', 'default', 'favorites', 'books-i-own',\n",
    "'ebook', 'kindle', 'library', 'audiobook', 'owned-books', 'audiobooks', 'my-books',\n",
    "'ebooks', 'to-buy', 'english', 'calibre', 'books', 'british', 'audio', 'my-library',\n",
    "'favourites', 're-read', 'general', 'e-books',\"read-in-2020\"\n",
    "] #ignore these different bookshelves\n",
    "genres = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_xml(): #obtaining the bookshelves in which the book is included\n",
    "    for i in ids: \n",
    "        test = requests.get(f\"https://www.goodreads.com/book/show/{i}?key=xQXvrwOTLq7xonOLcjt2A\")\n",
    "        test = BeautifulSoup(test.content, \"lxml\")\n",
    "        shelves = test.find(\"popular_shelves\")\n",
    "        finding_genres(shelves)\n",
    "    return genres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [],
   "source": [
    "def finding_genres(shelves): #filtering the bookshelves to obtain only\n",
    "    prov_genres = [] #the first 8 results\n",
    "    for i in shelves:\n",
    "        if len(i) == 0:\n",
    "            x = i.attrs[\"name\"]\n",
    "            if x not in genreExceptions:\n",
    "                if len(prov_genres) < 8:\n",
    "                    x = x.replace(\"non-fiction\",\"nonfiction\").lower()\n",
    "                    prov_genres.append(x)\n",
    "                    prov_genres = list(dict.fromkeys(prov_genres))\n",
    "    genres.append(prov_genres)\n",
    "    return genres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['histoire'],\n",
       " ['history',\n",
       "  'uni-books',\n",
       "  'modernity',\n",
       "  'historia',\n",
       "  'back-catalogue',\n",
       "  'f-europe',\n",
       "  'c-remember',\n",
       "  'remember'],\n",
       " ['roman-historique',\n",
       "  'fantastique',\n",
       "  'parents-library',\n",
       "  'childhood',\n",
       "  'bibliothèque',\n",
       "  'own-to-read',\n",
       "  'my-kid-teenage-years-reads',\n",
       "  'for-school'],\n",
       " ['fiction',\n",
       "  'french',\n",
       "  'france',\n",
       "  'français',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'marguerite-duras',\n",
       "  'french-literature'],\n",
       " ['wine',\n",
       "  'nonfiction',\n",
       "  'read-in-2021',\n",
       "  'scribd',\n",
       "  'in-english',\n",
       "  'c-wine',\n",
       "  'c-politics-political-science',\n",
       "  'nonfiction-2018'],\n",
       " ['science',\n",
       "  'nonfiction',\n",
       "  'queue',\n",
       "  'no-self',\n",
       "  'books-started-but-not-finished',\n",
       "  'read-2020',\n",
       "  'nonfic',\n",
       "  'u-nf-human-biology-medicine'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'very-short-introductions',\n",
       "  'ancient-history',\n",
       "  'vsi',\n",
       "  'a-very-short-introduction',\n",
       "  'very-short-introduction',\n",
       "  'britain'],\n",
       " ['spanish',\n",
       "  'juvenil',\n",
       "  'novela',\n",
       "  'spanish-literature',\n",
       "  'fiction',\n",
       "  'español',\n",
       "  'fantasy',\n",
       "  'literatura-española'],\n",
       " ['novela',\n",
       "  'spain',\n",
       "  'in-kindle',\n",
       "  'spanish-historical-fiction',\n",
       "  'nonfiction',\n",
       "  'historia',\n",
       "  'intereses',\n",
       "  'autodidactismo'],\n",
       " ['childhood'],\n",
       " ['paris',\n",
       "  'bibliothèque',\n",
       "  'travel',\n",
       "  'français',\n",
       "  'fiction',\n",
       "  'biblio-read',\n",
       "  'read-a-while-ago',\n",
       "  'shelf-pocket'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'french-literature',\n",
       "  'france',\n",
       "  'romance',\n",
       "  '18th-century',\n",
       "  'classic'],\n",
       " ['economics',\n",
       "  'politics',\n",
       "  'europe',\n",
       "  'art-and-humanities',\n",
       "  'try',\n",
       "  'eu',\n",
       "  'modernity',\n",
       "  'this-is-the-war-room'],\n",
       " ['nonfiction',\n",
       "  'religion',\n",
       "  'atheism',\n",
       "  'science',\n",
       "  'philosophy',\n",
       "  'essays',\n",
       "  'philosophy-religion',\n",
       "  'read-2017'],\n",
       " ['history-ir',\n",
       "  'intel-and-geopolitics',\n",
       "  'bookcrossing',\n",
       "  'poche',\n",
       "  'manon',\n",
       "  'french',\n",
       "  'bibli_ikea',\n",
       "  'at_home'],\n",
       " ['classics',\n",
       "  'jules-verne',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'french',\n",
       "  '2021-klasik-kitap-okuma-maratonu',\n",
       "  'comprados'],\n",
       " ['classics',\n",
       "  'theatre',\n",
       "  'french',\n",
       "  'plays',\n",
       "  'théâtre',\n",
       "  'drama',\n",
       "  'french-literature',\n",
       "  'classiques'],\n",
       " ['nonfiction',\n",
       "  'politics',\n",
       "  'vsi',\n",
       "  'political-science',\n",
       "  'phd',\n",
       "  'governance',\n",
       "  'a-very-short-introduction',\n",
       "  'short-introductions'],\n",
       " ['classics',\n",
       "  'theatre',\n",
       "  'french',\n",
       "  'plays',\n",
       "  'théâtre',\n",
       "  'classiques',\n",
       "  'french-literature',\n",
       "  'theater'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'french',\n",
       "  'theatre',\n",
       "  'drama',\n",
       "  'school',\n",
       "  'classic',\n",
       "  'fiction'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'shakespeare',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'school',\n",
       "  'historical-fiction'],\n",
       " ['historical-fiction',\n",
       "  'young-adult',\n",
       "  'fiction',\n",
       "  'shakespeare',\n",
       "  'historical',\n",
       "  'middle-grade',\n",
       "  'childrens',\n",
       "  'school'],\n",
       " ['fiction',\n",
       "  'caribbean',\n",
       "  '1001-books',\n",
       "  'classics',\n",
       "  'young-adult',\n",
       "  '1001',\n",
       "  'coming-of-age',\n",
       "  'antigua'],\n",
       " ['nonfiction',\n",
       "  'economics',\n",
       "  'africa',\n",
       "  'development',\n",
       "  'politics',\n",
       "  'international-development',\n",
       "  'history',\n",
       "  'poverty'],\n",
       " ['philosophy',\n",
       "  'politics',\n",
       "  'nonfiction',\n",
       "  'political-philosophy',\n",
       "  'very-short-introductions',\n",
       "  'a-very-short-introduction',\n",
       "  'vsi',\n",
       "  'history'],\n",
       " ['young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'fantasy',\n",
       "  'printz',\n",
       "  'printz-award',\n",
       "  'historical-fiction',\n",
       "  'ya-lit'],\n",
       " ['nonfiction',\n",
       "  'writing',\n",
       "  'rhetoric',\n",
       "  'reference',\n",
       "  'speaking',\n",
       "  'speeches',\n",
       "  'communication',\n",
       "  'priority'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'technology',\n",
       "  'science',\n",
       "  'data-science',\n",
       "  'data',\n",
       "  'tech',\n",
       "  'big-data'],\n",
       " ['plays',\n",
       "  'classics',\n",
       "  'french',\n",
       "  'theatre',\n",
       "  'drama',\n",
       "  'fiction',\n",
       "  'french-literature',\n",
       "  'théâtre'],\n",
       " ['fantasy',\n",
       "  'young-adult',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'adventure',\n",
       "  'magical-realism',\n",
       "  'spanish',\n",
       "  'isabel-allende'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'french',\n",
       "  'theatre',\n",
       "  'fiction',\n",
       "  'théâtre',\n",
       "  'drama',\n",
       "  'french-literature'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'very-short-introductions',\n",
       "  'a-very-short-introduction',\n",
       "  'vsi',\n",
       "  'very-short-intros',\n",
       "  'short-introductions',\n",
       "  'very-short-introduction'],\n",
       " ['mystery',\n",
       "  'fiction',\n",
       "  'france',\n",
       "  'french',\n",
       "  'thriller',\n",
       "  'crime',\n",
       "  'crime-fiction',\n",
       "  'adelphi'],\n",
       " ['plays',\n",
       "  'fiction',\n",
       "  'romance',\n",
       "  'classic',\n",
       "  'shakespeare',\n",
       "  'school',\n",
       "  'drama',\n",
       "  'play'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'french',\n",
       "  'theatre',\n",
       "  'fiction',\n",
       "  'théâtre',\n",
       "  'french-literature',\n",
       "  'drama'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'a-very-short-introduction',\n",
       "  'vsi',\n",
       "  'wwii',\n",
       "  'very-short-introductions',\n",
       "  'short-introductions',\n",
       "  'war'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'theatre',\n",
       "  'french',\n",
       "  'théâtre',\n",
       "  'french-literature',\n",
       "  'fiction',\n",
       "  'theater'],\n",
       " ['philosophy',\n",
       "  'politics',\n",
       "  'nonfiction',\n",
       "  'classics',\n",
       "  'history',\n",
       "  'french',\n",
       "  'political-philosophy',\n",
       "  'political-science'],\n",
       " ['french'],\n",
       " ['plays',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'play',\n",
       "  'theatre',\n",
       "  'literature',\n",
       "  'classic'],\n",
       " ['my-shelves',\n",
       "  'school',\n",
       "  'francais',\n",
       "  'tbr',\n",
       "  'mystery',\n",
       "  'l-french',\n",
       "  'jeunesse',\n",
       "  '20e'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'foreign-policy',\n",
       "  'international-relations',\n",
       "  'current-affairs',\n",
       "  'political-science',\n",
       "  'international-affairs',\n",
       "  'history'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'science',\n",
       "  'self-help',\n",
       "  'self-improvement',\n",
       "  'sociology',\n",
       "  'philosophy',\n",
       "  'audible'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'política',\n",
       "  'cambridge-reading-list',\n",
       "  'waiting-on-shelf',\n",
       "  'ensayo',\n",
       "  'political-theory'],\n",
       " ['fantasy',\n",
       "  'young-adult',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'childrens',\n",
       "  'middle-grade',\n",
       "  'ya',\n",
       "  'childhood'],\n",
       " ['fiction',\n",
       "  'young-adult',\n",
       "  'humour',\n",
       "  'humor',\n",
       "  'ya',\n",
       "  'comedy',\n",
       "  'childhood',\n",
       "  'funny'],\n",
       " ['histoire',\n",
       "  'history',\n",
       "  'pal',\n",
       "  'essays',\n",
       "  'history-tbr',\n",
       "  'nonfiction',\n",
       "  'sciences-po',\n",
       "  'poche'],\n",
       " ['historical-fiction',\n",
       "  'fiction',\n",
       "  'historical',\n",
       "  'young-adult',\n",
       "  'adventure',\n",
       "  'ya',\n",
       "  'classics',\n",
       "  'history'],\n",
       " ['fiction',\n",
       "  'czech',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'milan-kundera',\n",
       "  'novel',\n",
       "  'kundera',\n",
       "  'classics'],\n",
       " ['philosophy',\n",
       "  'politics',\n",
       "  'classics',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'political-science',\n",
       "  'political-philosophy',\n",
       "  'political-theory'],\n",
       " ['history',\n",
       "  'politics',\n",
       "  'nonfiction',\n",
       "  'american-history',\n",
       "  'presidents',\n",
       "  'us-presidents',\n",
       "  'biography',\n",
       "  'usa-history'],\n",
       " ['young-adult',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'mystery',\n",
       "  'alex-rider',\n",
       "  'thriller',\n",
       "  'series'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'france',\n",
       "  'french-literature'],\n",
       " ['middle-east',\n",
       "  'nonfiction',\n",
       "  'terrorism',\n",
       "  'history',\n",
       "  'yemen',\n",
       "  'politics',\n",
       "  'military',\n",
       "  'war'],\n",
       " ['fiction',\n",
       "  'africa',\n",
       "  'historical-fiction',\n",
       "  'zimbabwe',\n",
       "  'feminism',\n",
       "  '1001-books',\n",
       "  'african',\n",
       "  'african-literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'great-illustrated-classics',\n",
       "  'classic',\n",
       "  'children',\n",
       "  'childrens',\n",
       "  'i-own',\n",
       "  'kids'],\n",
       " ['poetry',\n",
       "  'french',\n",
       "  'classics',\n",
       "  'poésie',\n",
       "  'french-literature',\n",
       "  'poesie',\n",
       "  'france',\n",
       "  'french-lit'],\n",
       " ['africa',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'economics',\n",
       "  'عالم-المعرفة',\n",
       "  'development',\n",
       "  'environment'],\n",
       " ['history',\n",
       "  'politics',\n",
       "  'nonfiction',\n",
       "  'philosophy',\n",
       "  'classics',\n",
       "  'american-history',\n",
       "  'political-science',\n",
       "  'sociology'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'french-literature',\n",
       "  'france',\n",
       "  '1001-books',\n",
       "  'classic',\n",
       "  '19th-century'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'design',\n",
       "  'leadership'],\n",
       " ['histoire',\n",
       "  'history',\n",
       "  'nonfiction',\n",
       "  'read-for-school',\n",
       "  'pal',\n",
       "  'sciences-po',\n",
       "  'history-tbr',\n",
       "  'ma-bibliothèque'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'french',\n",
       "  'romance',\n",
       "  'theatre'],\n",
       " ['economics',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'business',\n",
       "  'political-science',\n",
       "  'economy',\n",
       "  'sociology'],\n",
       " ['french',\n",
       "  'jeunesse',\n",
       "  'fiction',\n",
       "  'fantasy',\n",
       "  'aventure',\n",
       "  'romans',\n",
       "  'middle-grade',\n",
       "  '小說'],\n",
       " ['history',\n",
       "  'china',\n",
       "  'nonfiction',\n",
       "  'war',\n",
       "  'world-war-ii',\n",
       "  'ww2',\n",
       "  'japan',\n",
       "  'asia'],\n",
       " ['fiction',\n",
       "  'uruguay',\n",
       "  'tag',\n",
       "  'latin-america',\n",
       "  'novels',\n",
       "  'classics',\n",
       "  'latin-american-literature',\n",
       "  'translated'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'essays',\n",
       "  'filosofia',\n",
       "  'science',\n",
       "  'religion',\n",
       "  'bertrand-russell',\n",
       "  'felsefe'],\n",
       " ['nonfiction',\n",
       "  'classics',\n",
       "  'history',\n",
       "  'biography',\n",
       "  'memoir',\n",
       "  'classic',\n",
       "  'young-adult',\n",
       "  'historical'],\n",
       " ['histoire',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'pensée-critique',\n",
       "  'politique',\n",
       "  'france',\n",
       "  'bourbon',\n",
       "  'biographie'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'science-fiction',\n",
       "  'sci-fi',\n",
       "  'dystopia',\n",
       "  'dystopian',\n",
       "  'classic',\n",
       "  'literature'],\n",
       " ['history',\n",
       "  'china',\n",
       "  'nonfiction',\n",
       "  'asia',\n",
       "  'chinese-history',\n",
       "  'politics',\n",
       "  'chinese',\n",
       "  'asian-history'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'action',\n",
       "  'spy',\n",
       "  'mystery'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'humour'],\n",
       " ['young-adult',\n",
       "  'ya',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'cherub',\n",
       "  'series',\n",
       "  'action',\n",
       "  'spy'],\n",
       " ['poetry',\n",
       "  'french',\n",
       "  'poésie',\n",
       "  'france',\n",
       "  'poesie',\n",
       "  'français',\n",
       "  'classics',\n",
       "  'french-literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'adventure',\n",
       "  'literature',\n",
       "  'french',\n",
       "  'historical'],\n",
       " ['children',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'french',\n",
       "  'humor',\n",
       "  'short-stories',\n",
       "  'jeunesse',\n",
       "  'humour'],\n",
       " ['young-adult',\n",
       "  'cherub',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['children',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'french',\n",
       "  'humor',\n",
       "  'short-stories',\n",
       "  'children-s',\n",
       "  'france'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'series',\n",
       "  'childhood'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'action',\n",
       "  'spy',\n",
       "  'mystery'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['plays',\n",
       "  'théâtre',\n",
       "  'theatre',\n",
       "  'fiction',\n",
       "  'play',\n",
       "  'drama',\n",
       "  'school',\n",
       "  'french'],\n",
       " ['nonfiction',\n",
       "  'history',\n",
       "  'biography',\n",
       "  'holocaust',\n",
       "  'classics',\n",
       "  'memoir',\n",
       "  'war',\n",
       "  'italian'],\n",
       " ['language'],\n",
       " ['chess',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'biography',\n",
       "  'sports',\n",
       "  'politics',\n",
       "  'cold-war',\n",
       "  'games'],\n",
       " ['nonfiction',\n",
       "  'memoir',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'book-club',\n",
       "  'mental-health',\n",
       "  'memoirs',\n",
       "  'audible'],\n",
       " ['science',\n",
       "  'nonfiction',\n",
       "  'biography',\n",
       "  'history',\n",
       "  'biology',\n",
       "  'technology',\n",
       "  'biography-memoir',\n",
       "  'genetics'],\n",
       " ['poker',\n",
       "  'nonfiction',\n",
       "  'gambling',\n",
       "  'history',\n",
       "  'sports',\n",
       "  'games',\n",
       "  'fiction',\n",
       "  'biography'],\n",
       " ['nonfiction',\n",
       "  'health',\n",
       "  'science',\n",
       "  'self-help',\n",
       "  'psychology',\n",
       "  '2021-books',\n",
       "  'self-improvement',\n",
       "  'neuroscience'],\n",
       " ['sports',\n",
       "  'running',\n",
       "  'fitness',\n",
       "  'psychology-self-help',\n",
       "  'health',\n",
       "  'returned',\n",
       "  'running-sport',\n",
       "  'business'],\n",
       " ['running',\n",
       "  'nonfiction',\n",
       "  'psychology',\n",
       "  'sports',\n",
       "  'fitness',\n",
       "  'sport',\n",
       "  'health',\n",
       "  'running-books'],\n",
       " ['french',\n",
       "  'romain-gary',\n",
       "  'novels',\n",
       "  'nonfiction',\n",
       "  'littérature-française',\n",
       "  'to-get',\n",
       "  'o_biblioteca_mlol',\n",
       "  'g_novel-fantasy'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'german',\n",
       "  'short-stories',\n",
       "  'literature',\n",
       "  'german-literature',\n",
       "  'austria',\n",
       "  'novels'],\n",
       " ['nonfiction',\n",
       "  'memoir',\n",
       "  'biography',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'memoirs',\n",
       "  'autobiography',\n",
       "  'audible'],\n",
       " ['nonfiction',\n",
       "  'economics',\n",
       "  'business',\n",
       "  'finance',\n",
       "  'psychology',\n",
       "  'philosophy',\n",
       "  'science',\n",
       "  'investing'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'science',\n",
       "  'leadership'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'technology',\n",
       "  'sociology',\n",
       "  'tech',\n",
       "  'internet',\n",
       "  'self-help',\n",
       "  'education'],\n",
       " ['chess',\n",
       "  'nonfiction',\n",
       "  'for-dummies',\n",
       "  'games',\n",
       "  'reference',\n",
       "  'dummies',\n",
       "  'sports',\n",
       "  'did-not-finish'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'science',\n",
       "  'history',\n",
       "  'innovation',\n",
       "  'creativity',\n",
       "  'psychology',\n",
       "  'bill-gates'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'bill-gates',\n",
       "  'business',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'life'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'tech',\n",
       "  'technology',\n",
       "  'biography',\n",
       "  'read-in-2021',\n",
       "  'science',\n",
       "  'history'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'science',\n",
       "  'sociology',\n",
       "  'philosophy',\n",
       "  'psych',\n",
       "  'history',\n",
       "  'social-science'],\n",
       " ['nonfiction',\n",
       "  'productivity',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'self-development',\n",
       "  'psychology'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'technology',\n",
       "  'ai',\n",
       "  'china',\n",
       "  'science',\n",
       "  'tech',\n",
       "  'politics'],\n",
       " ['science',\n",
       "  'nonfiction',\n",
       "  'mathematics',\n",
       "  'math',\n",
       "  'history',\n",
       "  'maths',\n",
       "  'popular-science',\n",
       "  'biography'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'memory',\n",
       "  'self-improvement',\n",
       "  'memoir',\n",
       "  'personal-development'],\n",
       " ['science',\n",
       "  'nonfiction',\n",
       "  'philosophy',\n",
       "  'ai',\n",
       "  'technology',\n",
       "  'artificial-intelligence',\n",
       "  'tech',\n",
       "  'computer-science'],\n",
       " ['data',\n",
       "  'design',\n",
       "  'data-visualization',\n",
       "  'nonfiction',\n",
       "  'visualization',\n",
       "  'professional',\n",
       "  'work-related',\n",
       "  'computers'],\n",
       " ['essays',\n",
       "  'nonfiction',\n",
       "  'fiction',\n",
       "  'memoir',\n",
       "  'short-stories',\n",
       "  'essay',\n",
       "  'abandoned',\n",
       "  'literature'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'self-help',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'philosophy',\n",
       "  'leadership'],\n",
       " ['english-literature',\n",
       "  'to-read-running',\n",
       "  'author-20thc',\n",
       "  'tbr-books-i-own',\n",
       "  'fiction-general',\n",
       "  'fiction',\n",
       "  'themomcollection',\n",
       "  'modern-fiction'],\n",
       " ['nonfiction',\n",
       "  'public-policy',\n",
       "  'policy',\n",
       "  'politics',\n",
       "  'school',\n",
       "  'academic',\n",
       "  'grad-school',\n",
       "  'mpa'],\n",
       " ['nature',\n",
       "  'kahn-peter-jr-technological-nature',\n",
       "  'kahn',\n",
       "  'ecology',\n",
       "  'technology',\n",
       "  'nonfiction',\n",
       "  'hmi',\n",
       "  'philosophy'],\n",
       " ['education',\n",
       "  'psychology',\n",
       "  'nonfiction',\n",
       "  'learning',\n",
       "  'rationality',\n",
       "  'self-help',\n",
       "  'science',\n",
       "  'bret-victor'],\n",
       " ['education',\n",
       "  'nonfiction',\n",
       "  'teaching',\n",
       "  'fiction',\n",
       "  'learning',\n",
       "  'memoir',\n",
       "  'education-or-learning',\n",
       "  'own-have-not-read-yet'],\n",
       " ['fiction',\n",
       "  'mystery',\n",
       "  'fantasy',\n",
       "  'book-club',\n",
       "  'books-about-books',\n",
       "  'contemporary',\n",
       "  'adult',\n",
       "  'adult-fiction'],\n",
       " ['nonfiction',\n",
       "  'technology',\n",
       "  'philosophy',\n",
       "  'sociology',\n",
       "  'culture',\n",
       "  'science',\n",
       "  'media',\n",
       "  'history'],\n",
       " ['mathematics',\n",
       "  'math',\n",
       "  'science',\n",
       "  'nonfiction',\n",
       "  'vsauce',\n",
       "  'philosophy',\n",
       "  'popular-science',\n",
       "  'science-math'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'urban-planning',\n",
       "  'cities',\n",
       "  'architecture',\n",
       "  'urbanism',\n",
       "  'planning',\n",
       "  'urban-studies'],\n",
       " ['nonfiction',\n",
       "  'architecture',\n",
       "  'history',\n",
       "  'urban-planning',\n",
       "  'urbanism',\n",
       "  'cities',\n",
       "  'sociology',\n",
       "  'urban-studies'],\n",
       " ['design',\n",
       "  'product-design',\n",
       "  'biography',\n",
       "  'art',\n",
       "  'art-design',\n",
       "  'design-books',\n",
       "  'architecture-design',\n",
       "  'ux'],\n",
       " ['mathematics',\n",
       "  'math',\n",
       "  'nonfiction',\n",
       "  'science',\n",
       "  'puzzles',\n",
       "  'maths',\n",
       "  'logic',\n",
       "  'reference'],\n",
       " ['fiction',\n",
       "  'philosophy',\n",
       "  'novels',\n",
       "  'literature',\n",
       "  'jewish',\n",
       "  'women',\n",
       "  'torchlight-list',\n",
       "  'literary-fiction'],\n",
       " ['philosophy',\n",
       "  'mathematics',\n",
       "  'math',\n",
       "  'biography',\n",
       "  'science',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'logic'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'science',\n",
       "  'fiction',\n",
       "  'politics',\n",
       "  'to-read-nonfiction',\n",
       "  'philosophy-religion'],\n",
       " ['self-evolution'],\n",
       " ['fiction',\n",
       "  'mystery',\n",
       "  'historical-fiction',\n",
       "  'literature',\n",
       "  'classics',\n",
       "  'italian',\n",
       "  'thriller',\n",
       "  'novels'],\n",
       " ['nonfiction',\n",
       "  'essays',\n",
       "  'philosophy',\n",
       "  'german',\n",
       "  'austria',\n",
       "  'literature',\n",
       "  'to-get',\n",
       "  'ficcao'],\n",
       " ['nonfiction',\n",
       "  'technology',\n",
       "  'business',\n",
       "  'science',\n",
       "  'tech',\n",
       "  'futurism',\n",
       "  'future',\n",
       "  'audible'],\n",
       " ['philosophy',\n",
       "  'politics',\n",
       "  'political-philosophy',\n",
       "  'political-science',\n",
       "  'political-theory',\n",
       "  'high-priority',\n",
       "  'nonfiction',\n",
       "  'ciência-política'],\n",
       " ['utopia-dystopia',\n",
       "  'sociology',\n",
       "  'computer-science',\n",
       "  'software',\n",
       "  'else',\n",
       "  'ia',\n",
       "  'about2read',\n",
       "  'technology-history'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'science',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'education'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'science',\n",
       "  'systems',\n",
       "  'design',\n",
       "  'systems-thinking',\n",
       "  'psychology',\n",
       "  'philosophy'],\n",
       " ['philosophy',\n",
       "  'business',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'personal-development',\n",
       "  'psychology',\n",
       "  'self-improvement',\n",
       "  'finance'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'health',\n",
       "  'self-help',\n",
       "  'psychology',\n",
       "  'self-improvement',\n",
       "  'audible',\n",
       "  'yoga'],\n",
       " ['self-help',\n",
       "  'nonfiction',\n",
       "  'blinkist',\n",
       "  'spirituality',\n",
       "  'mindfulness',\n",
       "  'philosophy',\n",
       "  'psychology',\n",
       "  'meditation'],\n",
       " ['finance',\n",
       "  'business',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'personal-finance',\n",
       "  'money',\n",
       "  'personal-development',\n",
       "  'investing'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'classics',\n",
       "  'history',\n",
       "  'stoicism',\n",
       "  'self-help',\n",
       "  'classic',\n",
       "  'self-improvement'],\n",
       " ['self-help',\n",
       "  'psychology',\n",
       "  'nonfiction',\n",
       "  'recovery',\n",
       "  'addiction',\n",
       "  'mental-health',\n",
       "  'health',\n",
       "  'relationships'],\n",
       " ['psychology',\n",
       "  'science',\n",
       "  'mental-models',\n",
       "  'nonfiction',\n",
       "  'philosophy',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'self-development'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'mental-models',\n",
       "  'self-help',\n",
       "  'philosophy',\n",
       "  'self-improvement',\n",
       "  'thinking'],\n",
       " ['science',\n",
       "  'nonfiction',\n",
       "  'psychology',\n",
       "  'neuroscience',\n",
       "  'brain',\n",
       "  'self-help',\n",
       "  'next-big-idea-club',\n",
       "  'giveaways'],\n",
       " ['business',\n",
       "  'marketing',\n",
       "  'personal-development',\n",
       "  'career',\n",
       "  'nonfiction',\n",
       "  'self-development',\n",
       "  'kindle-unlimited',\n",
       "  'entrepreneurship'],\n",
       " ['economics',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'finance',\n",
       "  'economy',\n",
       "  'econ',\n",
       "  'science',\n",
       "  'politics'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'math',\n",
       "  'mathematics',\n",
       "  'economics',\n",
       "  'business',\n",
       "  'statistics'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'sociology',\n",
       "  'economics',\n",
       "  'class',\n",
       "  'social-theory',\n",
       "  'society',\n",
       "  'uk'],\n",
       " ['self-help',\n",
       "  'nonfiction',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'self-development',\n",
       "  'business',\n",
       "  'productivity',\n",
       "  'dnf'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'sociology',\n",
       "  'book-club',\n",
       "  'journalism',\n",
       "  'audible',\n",
       "  'read-in-2015',\n",
       "  'adult'],\n",
       " ['economics',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'politics',\n",
       "  'economy',\n",
       "  'sustainability',\n",
       "  'environment',\n",
       "  'finance'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'politics',\n",
       "  'philosophy',\n",
       "  'critical-thinking',\n",
       "  'data',\n",
       "  'technology'],\n",
       " ['history',\n",
       "  'politics',\n",
       "  'biography',\n",
       "  'nonfiction',\n",
       "  'american-history',\n",
       "  'presidents',\n",
       "  'political-science',\n",
       "  'biography-memoir'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'business',\n",
       "  'economics',\n",
       "  'politics',\n",
       "  'statistics',\n",
       "  'psychology',\n",
       "  'math'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'productivity',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'self-development'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'productivity',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'philosophy'],\n",
       " ['business',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'productivity',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'self-development'],\n",
       " ['self-help',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'productivity',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'self-development'],\n",
       " ['economics',\n",
       "  'nonfiction',\n",
       "  'finance',\n",
       "  'business',\n",
       "  'psychology',\n",
       "  'history',\n",
       "  'econ',\n",
       "  'economy'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'espionage',\n",
       "  'politics',\n",
       "  'decision-making',\n",
       "  'netgalley',\n",
       "  'audible-dld',\n",
       "  'check'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'political',\n",
       "  'economics',\n",
       "  'political-science',\n",
       "  'next-up',\n",
       "  'wish-list'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'american-literature',\n",
       "  'american',\n",
       "  'school'],\n",
       " ['nonfiction',\n",
       "  'philosophy',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'rhetoric',\n",
       "  'business',\n",
       "  'communication',\n",
       "  'writing'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'war',\n",
       "  'politics',\n",
       "  'philosophy',\n",
       "  'military-history',\n",
       "  'nyt',\n",
       "  'world-history'],\n",
       " ['classics',\n",
       "  'nonfiction',\n",
       "  'memoir',\n",
       "  'fiction',\n",
       "  'biography',\n",
       "  'france',\n",
       "  'travel',\n",
       "  'classic'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'magical-realism',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'novels',\n",
       "  'fantasy',\n",
       "  'historical-fiction'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'paused',\n",
       "  'next',\n",
       "  'my-physical-tbr',\n",
       "  'popular-science-philosophy',\n",
       "  'to-read-now-nonfiction',\n",
       "  'politics-economics-communism'],\n",
       " ['nonfiction',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'russia',\n",
       "  'technology',\n",
       "  'media',\n",
       "  'sociology',\n",
       "  'society'],\n",
       " ['fantasy',\n",
       "  'young-adult',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'adventure',\n",
       "  'magical-realism',\n",
       "  'spanish',\n",
       "  'isabel-allende'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'social-justice',\n",
       "  'politics-and-law',\n",
       "  'arc',\n",
       "  '2020-reads',\n",
       "  'oakpl',\n",
       "  'read-later'],\n",
       " ['recabar',\n",
       "  'política',\n",
       "  'economie',\n",
       "  'société',\n",
       "  'theory-politics',\n",
       "  'finance-sct',\n",
       "  'nonfiction',\n",
       "  '1980-2014'],\n",
       " ['leadership',\n",
       "  'business',\n",
       "  'work',\n",
       "  'management',\n",
       "  'nonfiction',\n",
       "  'audible',\n",
       "  'self-improvement',\n",
       "  'business-leadership'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'finance',\n",
       "  'economics',\n",
       "  'history',\n",
       "  'investing',\n",
       "  'biography',\n",
       "  'memoir'],\n",
       " ['adventure',\n",
       "  'roman',\n",
       "  'aventure',\n",
       "  'x-authors-of-color',\n",
       "  'to-read-not-owned',\n",
       "  'straight-contempo-rom-novels',\n",
       "  'récits-de-voyage-lus',\n",
       "  'east-asian-litterature'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'science',\n",
       "  'medicine',\n",
       "  'health',\n",
       "  'sociology',\n",
       "  'world-history',\n",
       "  'epidemics'],\n",
       " ['nonfiction',\n",
       "  'memoir',\n",
       "  'philosophy',\n",
       "  'french',\n",
       "  'biography',\n",
       "  'death',\n",
       "  'france',\n",
       "  'classics'],\n",
       " ['fiction',\n",
       "  'literatura-irlandesa',\n",
       "  'have',\n",
       "  'post-moderne',\n",
       "  'nouvelles',\n",
       "  'em_pt-lusophone',\n",
       "  'fr-literature',\n",
       "  'novel'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'philosophy',\n",
       "  'psychoanalysis',\n",
       "  'humor',\n",
       "  'freud',\n",
       "  'comedy',\n",
       "  'classics'],\n",
       " ['fiction',\n",
       "  'novels',\n",
       "  'literature',\n",
       "  'czech',\n",
       "  'philosophy',\n",
       "  'milan-kundera',\n",
       "  'novel',\n",
       "  'kundera'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'literature',\n",
       "  'german',\n",
       "  'novels',\n",
       "  'german-literature',\n",
       "  '1001-books'],\n",
       " ['french',\n",
       "  'fiction',\n",
       "  'novel',\n",
       "  'français',\n",
       "  'novels',\n",
       "  'roman',\n",
       "  'fransız-edebiyatı',\n",
       "  'en-français'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'science',\n",
       "  'sociology',\n",
       "  'philosophy',\n",
       "  'psych',\n",
       "  'social-psychology',\n",
       "  'social-science'],\n",
       " ['nonfiction',\n",
       "  'writing',\n",
       "  'essays',\n",
       "  'politics',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'on-writing',\n",
       "  'history'],\n",
       " ['classics',\n",
       "  'philosophy',\n",
       "  'fiction',\n",
       "  'politics',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'nonfiction',\n",
       "  'dystopia'],\n",
       " ['fiction',\n",
       "  '1001-books',\n",
       "  'novels',\n",
       "  'czech',\n",
       "  'literature',\n",
       "  '1001',\n",
       "  'milan-kundera',\n",
       "  'novel'],\n",
       " ['fiction',\n",
       "  'italian',\n",
       "  'narrativa',\n",
       "  'italiani',\n",
       "  'contemporary',\n",
       "  'italy',\n",
       "  'letteratura-italiana',\n",
       "  'italian-literature'],\n",
       " ['travel',\n",
       "  'nonfiction',\n",
       "  'memoir',\n",
       "  'biography',\n",
       "  'history',\n",
       "  'memoirs',\n",
       "  'autobiography',\n",
       "  'travel-writing'],\n",
       " ['french',\n",
       "  'classics',\n",
       "  'france',\n",
       "  'biography',\n",
       "  'nonfiction',\n",
       "  'fiction',\n",
       "  'french-literature',\n",
       "  'read-in-french'],\n",
       " ['business',\n",
       "  'consulting',\n",
       "  'nonfiction',\n",
       "  'leadership',\n",
       "  'work',\n",
       "  'management',\n",
       "  'career',\n",
       "  'sales'],\n",
       " ['fiction',\n",
       "  'french',\n",
       "  'thriller',\n",
       "  'france',\n",
       "  'contemporary',\n",
       "  'mystery',\n",
       "  'mystery-thriller',\n",
       "  'translated'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'philosophy',\n",
       "  'history',\n",
       "  'self-help',\n",
       "  'memoir',\n",
       "  'biography',\n",
       "  'classics'],\n",
       " ['français',\n",
       "  'bibliothèque',\n",
       "  'french',\n",
       "  'biographie',\n",
       "  'unfinished',\n",
       "  'roman',\n",
       "  'nonfiction',\n",
       "  'in-my-library-french'],\n",
       " ['nonfiction',\n",
       "  'race',\n",
       "  'anti-racism',\n",
       "  'politics',\n",
       "  'blm',\n",
       "  'social-justice',\n",
       "  'netgalley',\n",
       "  'antiracism'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'magical-realism',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'novels',\n",
       "  'fantasy',\n",
       "  'historical-fiction'],\n",
       " ['fiction',\n",
       "  'french',\n",
       "  'classics',\n",
       "  'aviation',\n",
       "  'french-literature',\n",
       "  'france',\n",
       "  'adventure',\n",
       "  'novels'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'stoicism',\n",
       "  'self-help',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'history'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'finance',\n",
       "  'economics',\n",
       "  'history',\n",
       "  'investing',\n",
       "  'trading',\n",
       "  'technology'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'biography',\n",
       "  'existentialism',\n",
       "  'france',\n",
       "  'fiction',\n",
       "  'abandoned'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'business',\n",
       "  'productivity',\n",
       "  'science'],\n",
       " ['self-help',\n",
       "  'nonfiction',\n",
       "  'spirituality',\n",
       "  'spiritual',\n",
       "  'philosophy',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'self-improvement'],\n",
       " ['plays',\n",
       "  'classics',\n",
       "  'drama',\n",
       "  'fiction',\n",
       "  'play',\n",
       "  'school',\n",
       "  'theatre',\n",
       "  'classic'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'drama',\n",
       "  'school',\n",
       "  'classic',\n",
       "  'play'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'humor',\n",
       "  'play',\n",
       "  'literature'],\n",
       " ['economics',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'politics',\n",
       "  'econ',\n",
       "  'finance',\n",
       "  'bill-gates',\n",
       "  'economy'],\n",
       " ['business',\n",
       "  'biography',\n",
       "  'nonfiction',\n",
       "  'leadership',\n",
       "  'biographies',\n",
       "  'memoir',\n",
       "  'memoirs',\n",
       "  'disney'],\n",
       " ['fiction',\n",
       "  'science-fiction',\n",
       "  'sci-fi',\n",
       "  'fantasy',\n",
       "  'historical-fiction',\n",
       "  'dystopia',\n",
       "  'book-club',\n",
       "  'contemporary'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'travel',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'novels',\n",
       "  'nonfiction',\n",
       "  'american'],\n",
       " ['running',\n",
       "  'nonfiction',\n",
       "  'sport',\n",
       "  'sports',\n",
       "  'fitness',\n",
       "  'biography',\n",
       "  'outdoors',\n",
       "  'running-books'],\n",
       " ['nonfiction',\n",
       "  'memoir',\n",
       "  'travel',\n",
       "  'fiction',\n",
       "  'book-club',\n",
       "  'memoirs',\n",
       "  'biography',\n",
       "  'chick-lit'],\n",
       " ['poetry',\n",
       "  'poesie',\n",
       "  'poésie',\n",
       "  'tbr',\n",
       "  'france',\n",
       "  'french',\n",
       "  'mes-must',\n",
       "  'littérature-française'],\n",
       " ['nonfiction',\n",
       "  'history',\n",
       "  'adventure',\n",
       "  'biography',\n",
       "  'travel',\n",
       "  'survival',\n",
       "  'book-club',\n",
       "  'audible'],\n",
       " ['qat', 'drugs'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'memoir',\n",
       "  'mental-health',\n",
       "  'memoirs',\n",
       "  'biography',\n",
       "  'mental-illness',\n",
       "  'psych'],\n",
       " ['plays',\n",
       "  'drama',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'theatre',\n",
       "  'play',\n",
       "  'theater',\n",
       "  'american'],\n",
       " ['plays',\n",
       "  'drama',\n",
       "  'theatre',\n",
       "  'italian',\n",
       "  'classics',\n",
       "  'play',\n",
       "  'theater',\n",
       "  'literature'],\n",
       " ['short-stories',\n",
       "  'fiction',\n",
       "  'canadian',\n",
       "  'canada',\n",
       "  'book-club',\n",
       "  'literary-fiction',\n",
       "  'nobel-prize',\n",
       "  'contemporary'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'historical-fiction',\n",
       "  'african-american',\n",
       "  'race',\n",
       "  'book-club',\n",
       "  'literature',\n",
       "  'novels'],\n",
       " ['fiction',\n",
       "  'historical-fiction',\n",
       "  '1001-books',\n",
       "  'religion',\n",
       "  'classics',\n",
       "  'literature',\n",
       "  '1001',\n",
       "  'swedish'],\n",
       " ['japan',\n",
       "  'fiction',\n",
       "  'japanese',\n",
       "  'japanese-literature',\n",
       "  'classics',\n",
       "  'japanese-lit',\n",
       "  '1001-books',\n",
       "  'asia'],\n",
       " ['plays',\n",
       "  'drama',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'theatre',\n",
       "  'play',\n",
       "  'american',\n",
       "  'literature'],\n",
       " ['poetry',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'modernism',\n",
       "  '20th-century',\n",
       "  'poesia'],\n",
       " ['fiction',\n",
       "  'german',\n",
       "  'classics',\n",
       "  '1001-books',\n",
       "  'german-literature',\n",
       "  'germany',\n",
       "  '1001',\n",
       "  'deutsch'],\n",
       " ['poetry',\n",
       "  'classics',\n",
       "  'latin-america',\n",
       "  'spanish',\n",
       "  'chile',\n",
       "  'poems',\n",
       "  'fiction',\n",
       "  'bilingual'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'american',\n",
       "  'novels',\n",
       "  'american-literature',\n",
       "  '1001-books'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'essays',\n",
       "  'classics',\n",
       "  'french',\n",
       "  'existentialism',\n",
       "  'fiction',\n",
       "  'literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'historical-fiction',\n",
       "  'american',\n",
       "  'steinbeck',\n",
       "  'novels'],\n",
       " ['plays',\n",
       "  'philosophy',\n",
       "  'classics',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'french',\n",
       "  'play',\n",
       "  'theatre'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'russian',\n",
       "  'russia',\n",
       "  'historical-fiction',\n",
       "  'russian-literature',\n",
       "  'literature',\n",
       "  'history'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'play',\n",
       "  'theatre',\n",
       "  'school'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'german',\n",
       "  'literature',\n",
       "  'german-literature',\n",
       "  'philosophy',\n",
       "  'novels',\n",
       "  'classic'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'young-adult',\n",
       "  'school',\n",
       "  'literature',\n",
       "  'dystopia',\n",
       "  'dystopian'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'literature',\n",
       "  'norwegian',\n",
       "  'novels',\n",
       "  'scandinavian',\n",
       "  'norway',\n",
       "  '1001-books'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'historical-fiction',\n",
       "  'magical-realism',\n",
       "  'literature',\n",
       "  'african-american',\n",
       "  'classic',\n",
       "  'pulitzer'],\n",
       " ['fiction',\n",
       "  'africa',\n",
       "  'south-africa',\n",
       "  'literature',\n",
       "  'booker-prize',\n",
       "  'novels',\n",
       "  'contemporary',\n",
       "  'classics'],\n",
       " ['fiction',\n",
       "  'dystopia',\n",
       "  'science-fiction',\n",
       "  'classics',\n",
       "  'dystopian',\n",
       "  'sci-fi',\n",
       "  'novels',\n",
       "  'book-club'],\n",
       " ['fiction',\n",
       "  'japan',\n",
       "  'japanese',\n",
       "  'japanese-literature',\n",
       "  'japanese-lit',\n",
       "  'literature',\n",
       "  'nobel-prize',\n",
       "  'nobel'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'philosophy',\n",
       "  'spirituality',\n",
       "  'religion',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'buddhism'],\n",
       " ['politics',\n",
       "  'nonfiction',\n",
       "  'psychology',\n",
       "  'psych',\n",
       "  '1',\n",
       "  'nonfiction-politics-and-society',\n",
       "  'kindle-fire-hd-10-books',\n",
       "  'audio-books'],\n",
       " ['science-fiction',\n",
       "  'sci-fi',\n",
       "  'fiction',\n",
       "  'young-adult',\n",
       "  'fantasy',\n",
       "  'scifi',\n",
       "  'ya',\n",
       "  'classics'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  '1001-books',\n",
       "  'novels',\n",
       "  '1001',\n",
       "  'romance'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'book-club',\n",
       "  'classic',\n",
       "  'young-adult',\n",
       "  'coming-of-age',\n",
       "  'ya'],\n",
       " ['feminism',\n",
       "  'classic',\n",
       "  'psychology',\n",
       "  'literature',\n",
       "  'mental-illness',\n",
       "  'novels',\n",
       "  'poetry',\n",
       "  'adult'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'irish',\n",
       "  'ireland',\n",
       "  'novels',\n",
       "  '20th-century'],\n",
       " ['nonfiction',\n",
       "  'memoir',\n",
       "  'lost-generation',\n",
       "  'france',\n",
       "  'history',\n",
       "  'writing',\n",
       "  'biography',\n",
       "  'paris'],\n",
       " ['travel',\n",
       "  'nonfiction',\n",
       "  'colombia',\n",
       "  'south-america',\n",
       "  'fiction',\n",
       "  'memoirs',\n",
       "  '5-star',\n",
       "  'biography'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'lgbt',\n",
       "  'lgbtq',\n",
       "  'queer',\n",
       "  'lgbtqia',\n",
       "  'romance',\n",
       "  'novels'],\n",
       " ['history',\n",
       "  'biography',\n",
       "  'nonfiction',\n",
       "  'rome',\n",
       "  'ancient-rome',\n",
       "  'ancient-history',\n",
       "  'politics',\n",
       "  'biographies'],\n",
       " ['plays',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'drama',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'play',\n",
       "  'french-literature'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'suicide',\n",
       "  'penguin-great-ideas',\n",
       "  'classics',\n",
       "  'great-ideas',\n",
       "  'ethics',\n",
       "  'psychology'],\n",
       " ['nonfiction',\n",
       "  'philosophy',\n",
       "  'essays',\n",
       "  'psychology',\n",
       "  'ensayo',\n",
       "  'death',\n",
       "  'mental-health',\n",
       "  'suicide'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'leadership',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'creativity'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'historical-fiction',\n",
       "  'romance',\n",
       "  'magical-realism',\n",
       "  'literature',\n",
       "  'book-club',\n",
       "  'novels'],\n",
       " ['memory',\n",
       "  'memory-studies',\n",
       "  'philosophy-politics',\n",
       "  '1-primary-library',\n",
       "  'aaron-swartz-dkdk',\n",
       "  '1heavy-reads',\n",
       "  'partly-read',\n",
       "  'academic'],\n",
       " ['nonfiction',\n",
       "  'essays',\n",
       "  'race',\n",
       "  'politics',\n",
       "  'short-stories',\n",
       "  'blm',\n",
       "  'anti-racism',\n",
       "  'immigration'],\n",
       " ['sci-fi',\n",
       "  'science-fiction',\n",
       "  'fiction',\n",
       "  'thriller',\n",
       "  'mystery',\n",
       "  'book-club',\n",
       "  'scifi',\n",
       "  'mystery-thriller'],\n",
       " ['self-help',\n",
       "  'nonfiction',\n",
       "  'productivity',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'self-development',\n",
       "  'motivation'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'sociology',\n",
       "  'philosophy',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'culture',\n",
       "  'society'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'narcissism',\n",
       "  'relationships',\n",
       "  'mental-health',\n",
       "  'abuse',\n",
       "  'reference'],\n",
       " ['young-adult',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'contemporary',\n",
       "  'coming-of-age',\n",
       "  'romance',\n",
       "  'realistic-fiction',\n",
       "  'classics'],\n",
       " ['short-stories',\n",
       "  'fiction',\n",
       "  'fantastique',\n",
       "  'classics',\n",
       "  'italian',\n",
       "  'italy',\n",
       "  'nouvelles',\n",
       "  'french'],\n",
       " ['graphic-novels',\n",
       "  'graphic-novel',\n",
       "  'comics',\n",
       "  'nonfiction',\n",
       "  'history',\n",
       "  'memoir',\n",
       "  'holocaust',\n",
       "  'biography'],\n",
       " ['classics',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'children',\n",
       "  'classic',\n",
       "  'children-s',\n",
       "  'young-adult',\n",
       "  'children-s-books'],\n",
       " ['graphic-novels',\n",
       "  'graphic-novel',\n",
       "  'comics',\n",
       "  'history',\n",
       "  'nonfiction',\n",
       "  'memoir',\n",
       "  'holocaust',\n",
       "  'historical-fiction'],\n",
       " ['nonfiction',\n",
       "  'religion',\n",
       "  'science',\n",
       "  'philosophy',\n",
       "  'atheism',\n",
       "  'abandoned',\n",
       "  'psychology',\n",
       "  'theology'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'history',\n",
       "  'humor',\n",
       "  'non-fictión',\n",
       "  'abandoned',\n",
       "  'audible',\n",
       "  'popular-science'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'war',\n",
       "  'humor',\n",
       "  'literature',\n",
       "  'abandoned'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'fantasy',\n",
       "  'philosophy',\n",
       "  'book-club',\n",
       "  'novels',\n",
       "  'spirituality',\n",
       "  'literature'],\n",
       " ['feminism',\n",
       "  'nonfiction',\n",
       "  'philosophy',\n",
       "  'classics',\n",
       "  'feminist',\n",
       "  'women',\n",
       "  'feminismo',\n",
       "  'gender'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'environment',\n",
       "  'classics',\n",
       "  'nature',\n",
       "  'environmental',\n",
       "  'ecology',\n",
       "  'history'],\n",
       " ['philosophy',\n",
       "  'classics',\n",
       "  'nonfiction',\n",
       "  'fiction',\n",
       "  'german',\n",
       "  'filosofia',\n",
       "  'literature',\n",
       "  'classic'],\n",
       " ['childrens',\n",
       "  'children',\n",
       "  'picture-books',\n",
       "  'children-s-books',\n",
       "  'children-s',\n",
       "  'fiction',\n",
       "  'classics',\n",
       "  'kids'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'science-fiction',\n",
       "  'sci-fi',\n",
       "  'dystopia',\n",
       "  'dystopian',\n",
       "  'classic',\n",
       "  'school'],\n",
       " ['fiction',\n",
       "  'historical-fiction',\n",
       "  'contemporary',\n",
       "  'book-club',\n",
       "  'classics',\n",
       "  'novels',\n",
       "  'afghanistan',\n",
       "  'historical'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'philosophy',\n",
       "  'classic',\n",
       "  'french-literature',\n",
       "  'novels'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'french',\n",
       "  'france',\n",
       "  'french-literature',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'novel'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'adventure',\n",
       "  'young-adult',\n",
       "  'animals',\n",
       "  'historical-fiction',\n",
       "  'literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'russian',\n",
       "  'russia',\n",
       "  'russian-literature',\n",
       "  'classic',\n",
       "  'romance'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'spanish',\n",
       "  'adventure',\n",
       "  'novels',\n",
       "  'historical-fiction'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'classic',\n",
       "  'russian',\n",
       "  'literature',\n",
       "  'russian-literature',\n",
       "  'russia'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'historical-fiction',\n",
       "  'school',\n",
       "  'novels',\n",
       "  '19th-century'],\n",
       " ['fiction',\n",
       "  'historical-fiction',\n",
       "  'africa',\n",
       "  'book-club',\n",
       "  'nigeria',\n",
       "  'war',\n",
       "  'historical',\n",
       "  'african-literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'american',\n",
       "  '1001-books',\n",
       "  'american-literature',\n",
       "  '1001',\n",
       "  'literature'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'productivity',\n",
       "  'career',\n",
       "  'effective-altruism',\n",
       "  'business',\n",
       "  'philosophy',\n",
       "  'self-improvement'],\n",
       " ['fiction',\n",
       "  'french',\n",
       "  'france',\n",
       "  'politics',\n",
       "  'contemporary',\n",
       "  'novels',\n",
       "  'literature',\n",
       "  'french-literature'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'productivity',\n",
       "  'self-development',\n",
       "  'business'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'french-literature',\n",
       "  'france',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  '19th-century'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'ethics',\n",
       "  'effective-altruism',\n",
       "  'the-good-place',\n",
       "  'philanthropy',\n",
       "  'psychology',\n",
       "  'economics'],\n",
       " ['activism',\n",
       "  'favourite-nonfic',\n",
       "  'own-print-copy',\n",
       "  'activism-society',\n",
       "  'read-in-2021',\n",
       "  'change-the-world',\n",
       "  '2021-tbr',\n",
       "  'mel-city'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'literature',\n",
       "  'german',\n",
       "  '1001-books',\n",
       "  'german-literature',\n",
       "  'austria'],\n",
       " ['historical-fiction',\n",
       "  'fiction',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'book-club',\n",
       "  'historical',\n",
       "  'classics',\n",
       "  'war'],\n",
       " ['nonfiction',\n",
       "  'holocaust',\n",
       "  'philosophy',\n",
       "  'history',\n",
       "  'religion',\n",
       "  'memoir',\n",
       "  'wwii',\n",
       "  'spirituality'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'literature',\n",
       "  'philosophy',\n",
       "  'classic',\n",
       "  'german',\n",
       "  'novels',\n",
       "  'dystopia'],\n",
       " ['philo',\n",
       "  'essais',\n",
       "  'nonfiction',\n",
       "  'gave-up-on',\n",
       "  'maybe',\n",
       "  'faves-of-2019',\n",
       "  'en-pause-indéfinie',\n",
       "  'philosophy'],\n",
       " ['psychology',\n",
       "  'nonfiction',\n",
       "  'business',\n",
       "  'self-help',\n",
       "  'science',\n",
       "  'economics',\n",
       "  'behavioral-economics',\n",
       "  'audible'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'history',\n",
       "  'botm',\n",
       "  'science',\n",
       "  'mental-health',\n",
       "  'book-of-the-month',\n",
       "  'dnf'],\n",
       " ['historical-fiction',\n",
       "  'fiction',\n",
       "  'book-club',\n",
       "  'historical',\n",
       "  '2020-books',\n",
       "  'romance',\n",
       "  'read-2020',\n",
       "  '2020-reads'],\n",
       " ['poetry',\n",
       "  'fiction',\n",
       "  'politics',\n",
       "  'war',\n",
       "  'disability',\n",
       "  'poetry-to-read',\n",
       "  'tbr-poetry',\n",
       "  'poems'],\n",
       " ['business',\n",
       "  'strategy',\n",
       "  'management',\n",
       "  'iese',\n",
       "  'other',\n",
       "  'improvement',\n",
       "  'business-mgmt',\n",
       "  'masters'],\n",
       " ['business',\n",
       "  'nonfiction',\n",
       "  'management',\n",
       "  'leadership',\n",
       "  'work',\n",
       "  'fiction',\n",
       "  'self-help',\n",
       "  'business-books'],\n",
       " ['romance',\n",
       "  'contemporary',\n",
       "  'fiction',\n",
       "  'adult',\n",
       "  'contemporary-romance',\n",
       "  'chick-lit',\n",
       "  'dnf',\n",
       "  '2020-reads'],\n",
       " ['business',\n",
       "  'leadership',\n",
       "  'nonfiction',\n",
       "  'management',\n",
       "  'psychology',\n",
       "  'professional-development',\n",
       "  'work',\n",
       "  'product-management'],\n",
       " ['nonfiction',\n",
       "  'philosophy',\n",
       "  'language',\n",
       "  'linguistics',\n",
       "  'semantics',\n",
       "  'communication',\n",
       "  'writing',\n",
       "  'priority'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'economics',\n",
       "  'history',\n",
       "  'politics',\n",
       "  'business',\n",
       "  'self-help'],\n",
       " ['business',\n",
       "  'career',\n",
       "  'nonfiction-kindled',\n",
       "  'book-summary',\n",
       "  'autodesenvolvimento',\n",
       "  'purity',\n",
       "  'self-improvement',\n",
       "  'nonfiction'],\n",
       " ['young-adult',\n",
       "  'fiction',\n",
       "  'classics',\n",
       "  'dystopian',\n",
       "  'dystopia',\n",
       "  'science-fiction',\n",
       "  'ya',\n",
       "  'fantasy'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'war',\n",
       "  'history',\n",
       "  'classic',\n",
       "  'historical',\n",
       "  'literature'],\n",
       " ['fiction',\n",
       "  '1001-books',\n",
       "  '1001',\n",
       "  'classics',\n",
       "  '1001-books-to-read-before-you-die',\n",
       "  'novels',\n",
       "  'literature',\n",
       "  '1001-books-to-read'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'philosophy',\n",
       "  'modern-library-100',\n",
       "  'modern-library-top-100',\n",
       "  'modern-library-100-best-novels'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'science-fiction',\n",
       "  'sci-fi',\n",
       "  'dystopia',\n",
       "  'dystopian',\n",
       "  'classic',\n",
       "  'literature'],\n",
       " ['classics',\n",
       "  'school',\n",
       "  'history',\n",
       "  'theatre',\n",
       "  'plays',\n",
       "  'théâtre',\n",
       "  'classique',\n",
       "  'roman'],\n",
       " ['philosophy',\n",
       "  'politics',\n",
       "  'nonfiction',\n",
       "  'filosofia',\n",
       "  'sociology',\n",
       "  'ethics',\n",
       "  'contemporary-philosophy',\n",
       "  'bertrand-russell'],\n",
       " ['psychology',\n",
       "  'business',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'marketing',\n",
       "  'leadership',\n",
       "  'self-improvement',\n",
       "  'personal-development'],\n",
       " ['fiction',\n",
       "  'historical-fiction',\n",
       "  'holocaust',\n",
       "  'hungary',\n",
       "  '1001-books',\n",
       "  'nobel',\n",
       "  '1001',\n",
       "  'hungarian'],\n",
       " ['nonfiction',\n",
       "  'philosophy',\n",
       "  'self-help',\n",
       "  'economics',\n",
       "  'effective-altruism',\n",
       "  'self-improvement',\n",
       "  'psychology',\n",
       "  'business'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'economics',\n",
       "  'world-history',\n",
       "  'sociology',\n",
       "  'audible',\n",
       "  'philosophy'],\n",
       " ['history',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'economics',\n",
       "  'international-relations',\n",
       "  'world-history',\n",
       "  'political-science',\n",
       "  'military'],\n",
       " ['geronimo-stilton',\n",
       "  'geronimo',\n",
       "  'audio_wanted',\n",
       "  '2020-2021-free-reads',\n",
       "  '6-9',\n",
       "  '02142021',\n",
       "  'boys-reads-2020',\n",
       "  'before'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'math',\n",
       "  'mathematics',\n",
       "  'psychology',\n",
       "  'bill-gates',\n",
       "  'maths',\n",
       "  'self-help'],\n",
       " ['nonfiction',\n",
       "  'history',\n",
       "  'war',\n",
       "  'french',\n",
       "  'holocaust',\n",
       "  'memoir',\n",
       "  'french-literature',\n",
       "  'literature'],\n",
       " ['nonfiction',\n",
       "  'economics',\n",
       "  'business',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'sociology',\n",
       "  'finance',\n",
       "  'politics'],\n",
       " ['politics'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'science',\n",
       "  'business',\n",
       "  'self-help',\n",
       "  'economics',\n",
       "  'self-improvement',\n",
       "  'personal-development'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'african-american',\n",
       "  'race',\n",
       "  'novels',\n",
       "  'historical-fiction'],\n",
       " ['psychology',\n",
       "  'science',\n",
       "  'nonfiction',\n",
       "  'neuroscience',\n",
       "  'philosophy',\n",
       "  'cognitive-science',\n",
       "  'brain',\n",
       "  'biology'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'classics',\n",
       "  'french',\n",
       "  'political-philosophy',\n",
       "  'political-science',\n",
       "  'sociology'],\n",
       " ['classics',\n",
       "  'philosophy',\n",
       "  'fiction',\n",
       "  'french',\n",
       "  'french-literature',\n",
       "  'france',\n",
       "  'classic',\n",
       "  '18th-century'],\n",
       " ['fiction',\n",
       "  'philosophy',\n",
       "  'french',\n",
       "  'classics',\n",
       "  'literature',\n",
       "  'french-literature',\n",
       "  'albert-camus',\n",
       "  'novels'],\n",
       " ['fiction',\n",
       "  'philosophy',\n",
       "  'classics',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'french-literature',\n",
       "  'novels',\n",
       "  'existentialism'],\n",
       " ['french',\n",
       "  'fiction',\n",
       "  'france',\n",
       "  'roman',\n",
       "  'africa',\n",
       "  'fantasy',\n",
       "  'french-literature',\n",
       "  'novels'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'classic',\n",
       "  'war',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'american-literature'],\n",
       " ['young-adult',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'contemporary',\n",
       "  'book-club',\n",
       "  'realistic-fiction',\n",
       "  'read-in-2017',\n",
       "  'read-in-2018'],\n",
       " ['fiction',\n",
       "  'inspirational',\n",
       "  'contemporary',\n",
       "  'fantasy',\n",
       "  'mitch-albom',\n",
       "  'book-club',\n",
       "  'classics',\n",
       "  'adult'],\n",
       " ['fiction',\n",
       "  'magical-realism',\n",
       "  'fantasy',\n",
       "  'japan',\n",
       "  'japanese',\n",
       "  'murakami',\n",
       "  'japanese-literature',\n",
       "  'novels'],\n",
       " ['fiction',\n",
       "  'book-club',\n",
       "  'africa',\n",
       "  'contemporary',\n",
       "  'feminism',\n",
       "  'literary-fiction',\n",
       "  'race',\n",
       "  'nigeria'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'literature',\n",
       "  'historical',\n",
       "  'novels',\n",
       "  'school'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'school',\n",
       "  'american-literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'russian',\n",
       "  'romance',\n",
       "  'book-club'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'literature',\n",
       "  'young-adult',\n",
       "  'adventure',\n",
       "  'school'],\n",
       " ['fiction',\n",
       "  'mystery',\n",
       "  'young-adult',\n",
       "  'contemporary',\n",
       "  'book-club',\n",
       "  'ya',\n",
       "  'autism',\n",
       "  'novels'],\n",
       " ['french',\n",
       "  'fiction',\n",
       "  '1001-books',\n",
       "  'classics',\n",
       "  '1001',\n",
       "  'france',\n",
       "  'nonfiction',\n",
       "  '1001-books-to-read-before-you-die'],\n",
       " ['fiction',\n",
       "  'french',\n",
       "  'classics',\n",
       "  'france',\n",
       "  'classique',\n",
       "  'littérature-française',\n",
       "  'french-literature',\n",
       "  'literature'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'children-s-books',\n",
       "  'childhood'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'historical-fiction',\n",
       "  'fiction',\n",
       "  'kids',\n",
       "  'childhood',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'kids',\n",
       "  'childhood',\n",
       "  'chapter-books',\n",
       "  'children-s-books'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'historical-fiction',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'kids'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'historical-fiction'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'historical-fiction',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'children-s'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'historical-fiction'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'children-s',\n",
       "  'adventure'],\n",
       " ['magic-tree-house',\n",
       "  'historical-fiction',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'kids',\n",
       "  'children'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'historical-fiction',\n",
       "  'kids'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'children-s',\n",
       "  'children'],\n",
       " ['magic-tree-house',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'fiction',\n",
       "  'kids',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'christmas'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'fiction',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'childhood',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'fiction',\n",
       "  'historical-fiction'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'kids',\n",
       "  'historical-fiction'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'historical-fiction',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'kids'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'fiction',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'childhood',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'chapter-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'fiction',\n",
       "  'children-s'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'childhood',\n",
       "  'children-s-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'children',\n",
       "  'kids',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children-s-books'],\n",
       " ['magic-tree-house',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children-s-books'],\n",
       " ['fantasy',\n",
       "  'childrens',\n",
       "  'magic-tree-house',\n",
       "  'kids',\n",
       "  'children',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'children-s-books'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'graphic-novel'],\n",
       " ['children',\n",
       "  'french',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'childrens',\n",
       "  'humor',\n",
       "  'français',\n",
       "  'children-s'],\n",
       " ['children',\n",
       "  'french',\n",
       "  'fiction',\n",
       "  'childhood',\n",
       "  'français',\n",
       "  'childrens',\n",
       "  'humor',\n",
       "  'children-s'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'graphic-novel'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humour',\n",
       "  'humor'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'graphic-novel'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'graphic-novel'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'bd',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'graphic-novel'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'humor',\n",
       "  'fiction',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'comic',\n",
       "  'graphic-novels',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humour',\n",
       "  'humor'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'graphic-novels',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'humour'],\n",
       " ['comics',\n",
       "  'asterix',\n",
       "  'graphic-novels',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'humor',\n",
       "  'graphic-novel'],\n",
       " ['comics',\n",
       "  'graphic-novels',\n",
       "  'asterix',\n",
       "  'comic',\n",
       "  'bd',\n",
       "  'fiction',\n",
       "  'graphic-novel',\n",
       "  'humor'],\n",
       " ['french',\n",
       "  'fiction',\n",
       "  'children',\n",
       "  'childrens',\n",
       "  'childhood',\n",
       "  'français',\n",
       "  'classics',\n",
       "  'children-s'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'psychology',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'leadership',\n",
       "  'self-development'],\n",
       " ['picture-books',\n",
       "  'fairy-tales',\n",
       "  'classics',\n",
       "  'childrens',\n",
       "  'fantasy',\n",
       "  'children',\n",
       "  'fairytales',\n",
       "  'children-s-books'],\n",
       " ['childrens',\n",
       "  'children',\n",
       "  'picture-books',\n",
       "  'children-s-books',\n",
       "  'fiction',\n",
       "  'classics',\n",
       "  'children-s',\n",
       "  'poetry'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'fiction',\n",
       "  'adventure',\n",
       "  'ya',\n",
       "  'spy',\n",
       "  'mystery',\n",
       "  'action'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'adventure',\n",
       "  'fiction',\n",
       "  'ya',\n",
       "  'action',\n",
       "  'mystery',\n",
       "  'spy'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'fiction',\n",
       "  'adventure',\n",
       "  'ya',\n",
       "  'action',\n",
       "  'spy',\n",
       "  'mystery'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'fiction',\n",
       "  'adventure',\n",
       "  'ya',\n",
       "  'mystery',\n",
       "  'spy',\n",
       "  'action'],\n",
       " ['young-adult',\n",
       "  'alex-rider',\n",
       "  'fiction',\n",
       "  'adventure',\n",
       "  'ya',\n",
       "  'spy',\n",
       "  'mystery',\n",
       "  'action'],\n",
       " ['young-adult',\n",
       "  'fiction',\n",
       "  'adventure',\n",
       "  'alex-rider',\n",
       "  'ya',\n",
       "  'mystery',\n",
       "  'action',\n",
       "  'spy'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'series',\n",
       "  'childhood'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'series',\n",
       "  'spy'],\n",
       " ['young-adult',\n",
       "  'cherub',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['cherub',\n",
       "  'young-adult',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'childhood',\n",
       "  'spy'],\n",
       " ['young-adult',\n",
       "  'cherub',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'series',\n",
       "  'spy'],\n",
       " ['young-adult',\n",
       "  'cherub',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['young-adult',\n",
       "  'cherub',\n",
       "  'ya',\n",
       "  'fiction',\n",
       "  'action',\n",
       "  'adventure',\n",
       "  'spy',\n",
       "  'series'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'american',\n",
       "  'historical-fiction',\n",
       "  'american-literature'],\n",
       " ['nonfiction',\n",
       "  'self-help',\n",
       "  'psychology',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'philosophy',\n",
       "  'self-development',\n",
       "  'dnf'],\n",
       " ['nonfiction',\n",
       "  'business',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'economics',\n",
       "  'finance',\n",
       "  'audible',\n",
       "  'decision-making'],\n",
       " ['nonfiction',\n",
       "  'history',\n",
       "  'science',\n",
       "  'philosophy',\n",
       "  'anthropology',\n",
       "  'sociology',\n",
       "  'technology',\n",
       "  'politics'],\n",
       " ['nonfiction',\n",
       "  'history',\n",
       "  'science',\n",
       "  'philosophy',\n",
       "  'anthropology',\n",
       "  'sociology',\n",
       "  'psychology',\n",
       "  'audible'],\n",
       " ['nonfiction',\n",
       "  'psychology',\n",
       "  'self-help',\n",
       "  'business',\n",
       "  'self-improvement',\n",
       "  'personal-development',\n",
       "  'leadership',\n",
       "  'education'],\n",
       " ['nonfiction',\n",
       "  'science',\n",
       "  'psychology',\n",
       "  'business',\n",
       "  'technology',\n",
       "  'economics',\n",
       "  'sociology',\n",
       "  'data'],\n",
       " ['philosophy',\n",
       "  'nonfiction',\n",
       "  'self-help',\n",
       "  'psychology',\n",
       "  'personal-development',\n",
       "  'self-improvement',\n",
       "  'stoicism',\n",
       "  'spirituality'],\n",
       " ['fiction',\n",
       "  'czech',\n",
       "  'novels',\n",
       "  'literature',\n",
       "  'milan-kundera',\n",
       "  'novel',\n",
       "  'kundera',\n",
       "  'czech-literature'],\n",
       " ['fiction',\n",
       "  'short-stories',\n",
       "  'czech',\n",
       "  'literature',\n",
       "  'milan-kundera',\n",
       "  'czech-literature',\n",
       "  'classics',\n",
       "  'kundera'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'literature',\n",
       "  'novels',\n",
       "  'czech',\n",
       "  'novel',\n",
       "  'romance'],\n",
       " ['fiction',\n",
       "  'classics',\n",
       "  'philosophy',\n",
       "  'german',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'novels',\n",
       "  'german-literature'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'horror',\n",
       "  'fantasy',\n",
       "  'literature',\n",
       "  'gothic',\n",
       "  'novels'],\n",
       " ['classics',\n",
       "  'philosophy',\n",
       "  'nonfiction',\n",
       "  'politics',\n",
       "  'history',\n",
       "  'classic',\n",
       "  'fiction',\n",
       "  'political'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'philosophy',\n",
       "  'french',\n",
       "  'classic',\n",
       "  'literature',\n",
       "  'satire',\n",
       "  'humor'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'france',\n",
       "  'french-literature',\n",
       "  'romance'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'historical-fiction',\n",
       "  'classic',\n",
       "  'adventure',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'historical'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'philosophy',\n",
       "  'french',\n",
       "  'literature',\n",
       "  'classic',\n",
       "  'novels',\n",
       "  'french-literature'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'shakespeare',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'school',\n",
       "  'play'],\n",
       " ['classics',\n",
       "  'plays',\n",
       "  'fiction',\n",
       "  'shakespeare',\n",
       "  'drama',\n",
       "  'classic',\n",
       "  'school',\n",
       "  'play'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'school',\n",
       "  'literature',\n",
       "  'high-school',\n",
       "  'read-for-school'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'fantasy',\n",
       "  'childrens',\n",
       "  'children',\n",
       "  'classic',\n",
       "  'french',\n",
       "  'children-s'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'school',\n",
       "  'historical-fiction',\n",
       "  'literature',\n",
       "  'read-for-school',\n",
       "  'novels'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'dystopia',\n",
       "  'fantasy',\n",
       "  'dystopian',\n",
       "  'literature',\n",
       "  'politics'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'romance',\n",
       "  'gothic',\n",
       "  'literature',\n",
       "  'historical-fiction',\n",
       "  '19th-century'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'historical-fiction',\n",
       "  'school',\n",
       "  'literature',\n",
       "  'young-adult',\n",
       "  'historical'],\n",
       " ['classics',\n",
       "  'fiction',\n",
       "  'classic',\n",
       "  'school',\n",
       "  'historical-fiction',\n",
       "  'literature',\n",
       "  'romance',\n",
       "  'novels']]"
      ]
     },
     "execution_count": 371,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_xml() #we now simply have to call our 1st function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 771,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "441"
      ]
     },
     "execution_count": 771,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(genres)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = books.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 773,
   "metadata": {},
   "outputs": [],
   "source": [
    "genres_df = pd.DataFrame({\"Genres\":genres}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Genres</th>\n",
       "      <th>Book Id</th>\n",
       "      <th>Title</th>\n",
       "      <th>Author</th>\n",
       "      <th>ISBN</th>\n",
       "      <th>My Rating</th>\n",
       "      <th>Average Rating</th>\n",
       "      <th>Publisher</th>\n",
       "      <th>Binding</th>\n",
       "      <th>Number of Pages</th>\n",
       "      <th>Year Published</th>\n",
       "      <th>Original Publication Year</th>\n",
       "      <th>Date Read</th>\n",
       "      <th>Date Added</th>\n",
       "      <th>Exclusive Shelf</th>\n",
       "      <th>Read Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[histoire]</td>\n",
       "      <td>31172358</td>\n",
       "      <td>Introduction L'Histoire de Notre Temps. Le Xxe...</td>\n",
       "      <td>Ren' R'Mond</td>\n",
       "      <td>=\"275784007X\"</td>\n",
       "      <td>3</td>\n",
       "      <td>2.89</td>\n",
       "      <td>Contemporary French Fiction</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2014</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/06</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[history, uni-books, modernity, historia, back...</td>\n",
       "      <td>17377501</td>\n",
       "      <td>Formations of European Modernity: A Historical...</td>\n",
       "      <td>Gerard Delanty</td>\n",
       "      <td>=\"113728790X\"</td>\n",
       "      <td>2</td>\n",
       "      <td>2.68</td>\n",
       "      <td>Palgrave Macmillan</td>\n",
       "      <td>Hardcover</td>\n",
       "      <td>352.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/06</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[roman-historique, fantastique, parents-librar...</td>\n",
       "      <td>4096948</td>\n",
       "      <td>Jehan de Loin</td>\n",
       "      <td>Bertrand Solet</td>\n",
       "      <td>=\"201321880X\"</td>\n",
       "      <td>3</td>\n",
       "      <td>3.08</td>\n",
       "      <td>Le livre de poche jeunesse</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>187.0</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/09/02</td>\n",
       "      <td>read</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[fiction, french, france, français, literature...</td>\n",
       "      <td>17332697</td>\n",
       "      <td>L'Amour</td>\n",
       "      <td>Marguerite Duras</td>\n",
       "      <td>=\"1934824798\"</td>\n",
       "      <td>3</td>\n",
       "      <td>3.28</td>\n",
       "      <td>Open Letter Books</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>112.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>1972.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[wine, nonfiction, read-in-2021, scribd, in-en...</td>\n",
       "      <td>3283513</td>\n",
       "      <td>Wine Politics: How Governments, Environmentali...</td>\n",
       "      <td>Tyler Colman</td>\n",
       "      <td>=\"0520255216\"</td>\n",
       "      <td>3</td>\n",
       "      <td>3.34</td>\n",
       "      <td>University of California Press</td>\n",
       "      <td>Hardcover</td>\n",
       "      <td>208.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2020/05/01</td>\n",
       "      <td>2020/05/01</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>436</td>\n",
       "      <td>[classics, fiction, classic, school, historica...</td>\n",
       "      <td>890</td>\n",
       "      <td>Of Mice and Men</td>\n",
       "      <td>John Steinbeck</td>\n",
       "      <td>=\"0142000671\"</td>\n",
       "      <td>5</td>\n",
       "      <td>3.88</td>\n",
       "      <td>Penguin Books</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>103.0</td>\n",
       "      <td>2002</td>\n",
       "      <td>1937.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>437</td>\n",
       "      <td>[classics, fiction, classic, dystopia, fantasy...</td>\n",
       "      <td>170448</td>\n",
       "      <td>Animal Farm</td>\n",
       "      <td>George Orwell</td>\n",
       "      <td>=\"0451526341\"</td>\n",
       "      <td>4</td>\n",
       "      <td>3.96</td>\n",
       "      <td>Signet Classics</td>\n",
       "      <td>Mass Market Paperback</td>\n",
       "      <td>141.0</td>\n",
       "      <td>1996</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>438</td>\n",
       "      <td>[classics, fiction, classic, romance, gothic, ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>Wuthering Heights</td>\n",
       "      <td>Emily Brontë</td>\n",
       "      <td>=\"\"</td>\n",
       "      <td>4</td>\n",
       "      <td>3.87</td>\n",
       "      <td>Norton</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>464.0</td>\n",
       "      <td>2002</td>\n",
       "      <td>1847.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>439</td>\n",
       "      <td>[classics, fiction, classic, historical-fictio...</td>\n",
       "      <td>2657</td>\n",
       "      <td>To Kill a Mockingbird</td>\n",
       "      <td>Harper Lee</td>\n",
       "      <td>=\"\"</td>\n",
       "      <td>5</td>\n",
       "      <td>4.28</td>\n",
       "      <td>Harper Perennial Modern Classics</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>324.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>1960.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>440</td>\n",
       "      <td>[classics, fiction, classic, school, historica...</td>\n",
       "      <td>4671</td>\n",
       "      <td>The Great Gatsby</td>\n",
       "      <td>F. Scott Fitzgerald</td>\n",
       "      <td>=\"\"</td>\n",
       "      <td>5</td>\n",
       "      <td>3.93</td>\n",
       "      <td>Scribner</td>\n",
       "      <td>Paperback</td>\n",
       "      <td>200.0</td>\n",
       "      <td>2004</td>\n",
       "      <td>1925.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020/01/04</td>\n",
       "      <td>read</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>441 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index                                             Genres   Book Id  \\\n",
       "0        0                                         [histoire]  31172358   \n",
       "1        1  [history, uni-books, modernity, historia, back...  17377501   \n",
       "2        2  [roman-historique, fantastique, parents-librar...   4096948   \n",
       "3        3  [fiction, french, france, français, literature...  17332697   \n",
       "4        4  [wine, nonfiction, read-in-2021, scribd, in-en...   3283513   \n",
       "..     ...                                                ...       ...   \n",
       "436    436  [classics, fiction, classic, school, historica...       890   \n",
       "437    437  [classics, fiction, classic, dystopia, fantasy...    170448   \n",
       "438    438  [classics, fiction, classic, romance, gothic, ...      6185   \n",
       "439    439  [classics, fiction, classic, historical-fictio...      2657   \n",
       "440    440  [classics, fiction, classic, school, historica...      4671   \n",
       "\n",
       "                                                 Title               Author  \\\n",
       "0    Introduction L'Histoire de Notre Temps. Le Xxe...          Ren' R'Mond   \n",
       "1    Formations of European Modernity: A Historical...       Gerard Delanty   \n",
       "2                                        Jehan de Loin       Bertrand Solet   \n",
       "3                                              L'Amour     Marguerite Duras   \n",
       "4    Wine Politics: How Governments, Environmentali...         Tyler Colman   \n",
       "..                                                 ...                  ...   \n",
       "436                                    Of Mice and Men       John Steinbeck   \n",
       "437                                        Animal Farm        George Orwell   \n",
       "438                                  Wuthering Heights         Emily Brontë   \n",
       "439                              To Kill a Mockingbird           Harper Lee   \n",
       "440                                   The Great Gatsby  F. Scott Fitzgerald   \n",
       "\n",
       "              ISBN  My Rating  Average Rating  \\\n",
       "0    =\"275784007X\"          3            2.89   \n",
       "1    =\"113728790X\"          2            2.68   \n",
       "2    =\"201321880X\"          3            3.08   \n",
       "3    =\"1934824798\"          3            3.28   \n",
       "4    =\"0520255216\"          3            3.34   \n",
       "..             ...        ...             ...   \n",
       "436  =\"0142000671\"          5            3.88   \n",
       "437  =\"0451526341\"          4            3.96   \n",
       "438            =\"\"          4            3.87   \n",
       "439            =\"\"          5            4.28   \n",
       "440            =\"\"          5            3.93   \n",
       "\n",
       "                             Publisher                Binding  \\\n",
       "0          Contemporary French Fiction              Paperback   \n",
       "1                   Palgrave Macmillan              Hardcover   \n",
       "2           Le livre de poche jeunesse              Paperback   \n",
       "3                    Open Letter Books              Paperback   \n",
       "4       University of California Press              Hardcover   \n",
       "..                                 ...                    ...   \n",
       "436                      Penguin Books              Paperback   \n",
       "437                    Signet Classics  Mass Market Paperback   \n",
       "438                             Norton              Paperback   \n",
       "439  Harper Perennial Modern Classics               Paperback   \n",
       "440                           Scribner              Paperback   \n",
       "\n",
       "     Number of Pages  Year Published  Original Publication Year   Date Read  \\\n",
       "0                NaN            2014                        NaN         NaN   \n",
       "1              352.0            2013                     2013.0         NaN   \n",
       "2              187.0            2001                     2001.0         NaN   \n",
       "3              112.0            2013                     1972.0         NaN   \n",
       "4              208.0            2008                     2008.0  2020/05/01   \n",
       "..               ...             ...                        ...         ...   \n",
       "436            103.0            2002                     1937.0         NaN   \n",
       "437            141.0            1996                     1945.0         NaN   \n",
       "438            464.0            2002                     1847.0         NaN   \n",
       "439            324.0            2006                     1960.0         NaN   \n",
       "440            200.0            2004                     1925.0         NaN   \n",
       "\n",
       "     Date Added Exclusive Shelf  Read Count  \n",
       "0    2020/01/06            read           1  \n",
       "1    2020/01/06            read           1  \n",
       "2    2020/09/02            read           0  \n",
       "3    2020/01/04            read           1  \n",
       "4    2020/05/01            read           1  \n",
       "..          ...             ...         ...  \n",
       "436  2020/01/04            read           1  \n",
       "437  2020/01/04            read           1  \n",
       "438  2020/01/04            read           1  \n",
       "439  2020/01/04            read           1  \n",
       "440  2020/01/04            read           1  \n",
       "\n",
       "[441 rows x 17 columns]"
      ]
     },
     "execution_count": 774,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genres_df.merge(books,on=\"index\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Viz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#books[\"Genres\"].value_counts().head(10).plot(kind=\"bar\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 775,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(pd.DataFrame(genres))\n",
    "df.columns = df.columns.str.split(\"_\").str[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 776,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame({\"index\":np.arange(0,441)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 777,
   "metadata": {},
   "outputs": [],
   "source": [
    "genres_dupli = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df.columns:\n",
    "    if i not in genres_dupli:\n",
    "        try: \n",
    "            df1[i]= pd.DataFrame(df[i].sum(axis=1))\n",
    "            genres_dupli.append(i)\n",
    "        except ValueError:\n",
    "            df1[i] = pd.DataFrame(df[i])\n",
    "            genres_dupli.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>activism</th>\n",
       "      <th>adventure</th>\n",
       "      <th>africa</th>\n",
       "      <th>business</th>\n",
       "      <th>cherub</th>\n",
       "      <th>chess</th>\n",
       "      <th>childhood</th>\n",
       "      <th>children</th>\n",
       "      <th>childrens</th>\n",
       "      <th>...</th>\n",
       "      <th>travel-writing</th>\n",
       "      <th>u-nf-human-biology-medicine</th>\n",
       "      <th>uk</th>\n",
       "      <th>urban-studies</th>\n",
       "      <th>usa-history</th>\n",
       "      <th>ux</th>\n",
       "      <th>wish-list</th>\n",
       "      <th>ya-lit</th>\n",
       "      <th>yoga</th>\n",
       "      <th>小說</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>436</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>437</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>438</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>439</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>440</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>441 rows × 639 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  activism  adventure  africa  business  cherub  chess  childhood  \\\n",
       "0        0         0          0       0         0       0      0          0   \n",
       "1        1         0          0       0         0       0      0          0   \n",
       "2        2         0          0       0         0       0      0          1   \n",
       "3        3         0          0       0         0       0      0          0   \n",
       "4        4         0          0       0         0       0      0          0   \n",
       "..     ...       ...        ...     ...       ...     ...    ...        ...   \n",
       "436    436         0          0       0         0       0      0          0   \n",
       "437    437         0          0       0         0       0      0          0   \n",
       "438    438         0          0       0         0       0      0          0   \n",
       "439    439         0          0       0         0       0      0          0   \n",
       "440    440         0          0       0         0       0      0          0   \n",
       "\n",
       "     children  childrens  ...  travel-writing  u-nf-human-biology-medicine  \\\n",
       "0           0          0  ...               0                            0   \n",
       "1           0          0  ...               0                            0   \n",
       "2           0          0  ...               0                            0   \n",
       "3           0          0  ...               0                            0   \n",
       "4           0          0  ...               0                            0   \n",
       "..        ...        ...  ...             ...                          ...   \n",
       "436         0          0  ...               0                            0   \n",
       "437         0          0  ...               0                            0   \n",
       "438         0          0  ...               0                            0   \n",
       "439         0          0  ...               0                            0   \n",
       "440         0          0  ...               0                            0   \n",
       "\n",
       "     uk  urban-studies  usa-history  ux  wish-list  ya-lit  yoga  小說  \n",
       "0     0              0            0   0          0       0     0   0  \n",
       "1     0              0            0   0          0       0     0   0  \n",
       "2     0              0            0   0          0       0     0   0  \n",
       "3     0              0            0   0          0       0     0   0  \n",
       "4     0              0            0   0          0       0     0   0  \n",
       "..   ..            ...          ...  ..        ...     ...   ...  ..  \n",
       "436   0              0            0   0          0       0     0   0  \n",
       "437   0              0            0   0          0       0     0   0  \n",
       "438   0              0            0   0          0       0     0   0  \n",
       "439   0              0            0   0          0       0     0   0  \n",
       "440   0              0            0   0          0       0     0   0  \n",
       "\n",
       "[441 rows x 639 columns]"
      ]
     },
     "execution_count": 779,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Useless"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# creating initial dataframe\n",
    "categories_types = ('biography & autobiography', 'games', 0, 'sports & recreation',\n",
    "       'history', 'science', 'self-help', 'business & economics',\n",
    "       'mathematics', 'computers', 'literary collections', 'families',\n",
    "       'political science', 'nature', 'education', 'fiction',\n",
    "       'social science', 'design', 'philosophy',\n",
    "       'language arts & disciplines', 'body, mind & spirit',\n",
    "       'family & relationships', 'juvenile fiction', 'equality',\n",
    "       'leadership', 'medical', 'psychology', 'dictators',\n",
    "       'man-woman relationships', 'existentialism', 'drama',\n",
    "       'cross-country running', 'poetry', 'cocaine', 'suicide',\n",
    "       'immigrants', 'short stories', 'children of holocaust survivors',\n",
    "       'english language', 'france', 'psychological fiction', 'religion',\n",
    "       'business', 'self-acceptance', 'civilization', 'humor',\n",
    "       'buchenwald (concentration camp)', 'war',\n",
    "       'pilgrims (new plymouth colony)', 'literature',\n",
    "       'juvenile nonfiction', 'comics & graphic novels',\n",
    "       'adventure and adventurers', 'animal rights activists',\n",
    "       'human trafficking', 'communism')\n",
    "books_2 = pd.DataFrame(categories_types, columns=['Categories'])\n",
    "# generate binary values using get_dummies\n",
    "dum_df = pd.get_dummies(books, columns=[\"Categories\"], prefix=[\"Type_is\"] )\n",
    "# merge with main df bridge_df on key values\n",
    "books = books.merge(dum_df)\n",
    "books"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Other Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 780,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = books.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 781,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = books.merge(df1,on=\"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 782,
   "metadata": {},
   "outputs": [],
   "source": [
    "mira = books[books[\"Exclusive Shelf\"] == \"read\"][[\"My Rating\",\"Exclusive Shelf\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 783,
   "metadata": {},
   "outputs": [],
   "source": [
    "books_read = books[books[\"Exclusive Shelf\"] == \"read\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 784,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "books_read[\"Publisher\"].fillna(\"0\",inplace=True)\n",
    "books_read[\"Original Publication Year\"].fillna(\"0\",inplace=True)\n",
    "books_read[\"Number of Pages\"].fillna(\"0\",inplace=True)\n",
    "books_read[\"Year Published\"].fillna(\"0\",inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 785,
   "metadata": {},
   "outputs": [],
   "source": [
    "drop_columns = [ 'Book Id', 'Title', 'Author', 'Author l-f',\n",
    "       'Additional Authors', 'ISBN', 'ISBN13', 'My Rating',\n",
    "       'Publisher', 'Binding', 'Number of Pages', 'Year Published',\n",
    "       'Original Publication Year', 'Date Read', 'Date Added', 'Bookshelves',\n",
    "       'Bookshelves with positions', 'Exclusive Shelf', 'My Review', 'Spoiler',\n",
    "       'Private Notes', 'Read Count', 'Recommended For', 'Recommended By',\n",
    "       'Owned Copies', 'Original Purchase Date', 'Original Purchase Location',\n",
    "       'Condition', 'Condition Description', 'BCID']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 786,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['read', 'currently-reading', 'to-read'], dtype=object)"
      ]
     },
     "execution_count": 786,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "books[\"Exclusive Shelf\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 787,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Author l-f' 'Additional Authors' 'ISBN13' 'Bookshelves'\\n 'Bookshelves with positions' 'My Review' 'Spoiler' 'Private Notes'\\n 'Recommended For' 'Recommended By' 'Owned Copies'\\n 'Original Purchase Date' 'Original Purchase Location' 'Condition'\\n 'Condition Description' 'BCID'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-787-ea68d6107367>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbooks_read\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4161\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4162\u001b[0m         \"\"\"\n\u001b[0;32m-> 4163\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   4164\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4165\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3885\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3886\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3887\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3889\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3919\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3920\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3921\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3922\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3923\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5280\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5281\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5282\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5283\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5284\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['Author l-f' 'Additional Authors' 'ISBN13' 'Bookshelves'\\n 'Bookshelves with positions' 'My Review' 'Spoiler' 'Private Notes'\\n 'Recommended For' 'Recommended By' 'Owned Copies'\\n 'Original Purchase Date' 'Original Purchase Location' 'Condition'\\n 'Condition Description' 'BCID'] not found in axis\""
     ]
    }
   ],
   "source": [
    "books_read.drop(drop_columns, axis=\"columns\").sum().sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 788,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['novels_y', 'psychology_y', 'biography_y', 'france_y', 'literature_y', 'personal-development_y', 'classics_y', 'history_y', 'french-literature_y', 'science_y', 'historical-fiction_y', 'nonfiction_y', 'self-help_y', 'french_y', 'fiction_y', 'politics_y', 'business_y', 'economics_y', 'school_y', 'classic_y', 'self-improvement_y', 'fantasy_y', 'self-development_y', 'philosophy_y'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-788-c01b8f936b00>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_set\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbooks_read\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m X_train = train_set[['self-development_y', 'school_y', 'fantasy_y', 'economics_y', 'biography_y',\n\u001b[0m\u001b[1;32m      5\u001b[0m        \u001b[0;34m'france_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'french-literature_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'personal-development_y'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m        \u001b[0;34m'historical-fiction_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'self-improvement_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'politics_y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'science_y'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2906\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2907\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2908\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2910\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1252\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1254\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1255\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1302\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1303\u001b[0m                 \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1304\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1305\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1306\u001b[0m             \u001b[0;31m# we skip the warning on Categorical\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['novels_y', 'psychology_y', 'biography_y', 'france_y', 'literature_y', 'personal-development_y', 'classics_y', 'history_y', 'french-literature_y', 'science_y', 'historical-fiction_y', 'nonfiction_y', 'self-help_y', 'french_y', 'fiction_y', 'politics_y', 'business_y', 'economics_y', 'school_y', 'classic_y', 'self-improvement_y', 'fantasy_y', 'self-development_y', 'philosophy_y'] not in index\""
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_set, test_set = train_test_split(books_read, test_size=0.2)\n",
    "X_train = train_set[['self-development_y', 'school_y', 'fantasy_y', 'economics_y', 'biography_y',\n",
    "       'france_y', 'french-literature_y', 'personal-development_y',\n",
    "       'historical-fiction_y', 'self-improvement_y', 'politics_y', 'science_y',\n",
    "       'self-help_y', 'history_y', 'french_y', 'business_y', 'novels_y', 'psychology_y',\n",
    "       'philosophy_y', 'classic_y', 'literature_y', 'classics_y', 'fiction_y',\n",
    "       'nonfiction_y', 'Average Rating']]\n",
    "y_train = train_set[\"My Rating\"]\n",
    "X_test = test_set[['self-development_y', 'school_y', 'fantasy_y', 'economics_y', 'biography_y',\n",
    "       'france_y', 'french-literature_y', 'personal-development_y',\n",
    "       'historical-fiction_y', 'self-improvement_y', 'politics_y', 'science_y',\n",
    "       'self-help_y', 'history_y', 'french_y', 'business_y', 'novels_y', 'psychology_y',\n",
    "       'philosophy_y', 'classic_y', 'literature_y', 'classics_y', 'fiction_y',\n",
    "       'nonfiction_y', 'Average Rating']]\n",
    "y_test = test_set[\"My Rating\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 789,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_set, test_set = train_test_split(books_read, test_size=0.2)\n",
    "X_train = train_set[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']]\n",
    "y_train = train_set[\"My Rating\"]\n",
    "X_test = test_set[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']]\n",
    "y_test = test_set[\"My Rating\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 790,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 791,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LogisticRegression(multi_class='multinomial', solver='lbfgs')\n",
    "model.fit(X_train,y_train)\n",
    "y_pred2 = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 792,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.759259259259259"
      ]
     },
     "execution_count": 792,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(X_train, y_train)\n",
    "mae(y_test,y_pred2)\n",
    "mse(y_test,y_pred2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 793,
   "metadata": {},
   "outputs": [],
   "source": [
    "coeffs = dict(zip(X_train.columns,model.coef_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 795,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 819,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Average Rating</th>\n",
       "      <th>Log Reg Predicted Rating</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Log Reg Ranking</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>4.37</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>4.12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <td>4.05</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <td>4.07</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.0</th>\n",
       "      <td>3.89</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110.0</th>\n",
       "      <td>4.14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111.0</th>\n",
       "      <td>3.89</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112.0</th>\n",
       "      <td>4.30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113.0</th>\n",
       "      <td>4.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114.0</th>\n",
       "      <td>4.27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>114 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Average Rating  Log Reg Predicted Rating\n",
       "Log Reg Ranking                                          \n",
       "1.0                        4.37                         5\n",
       "2.0                        4.12                         5\n",
       "3.0                        4.05                         5\n",
       "4.0                        4.07                         5\n",
       "5.0                        3.89                         5\n",
       "...                         ...                       ...\n",
       "110.0                      4.14                         0\n",
       "111.0                      3.89                         0\n",
       "112.0                      4.30                         0\n",
       "113.0                      4.10                         0\n",
       "114.0                      4.27                         0\n",
       "\n",
       "[114 rows x 2 columns]"
      ]
     },
     "execution_count": 819,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors = model.predict(X_for_predict[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']])\n",
    "predictors = pd.DataFrame(predictors)\n",
    "predictors = predictors.reset_index()\n",
    "not_read = books[books[\"My Rating\"] == 0]\n",
    "finale = not_read\n",
    "results = finale.merge(predictors, on=\"index\")\n",
    "results[\"Log Reg Predicted Rating\"] = results[0]\n",
    "results[\"Log Reg Ranking\"] = results[[\"Log Reg Predicted Rating\"]].sort_values(by=0,axis=\"columns\").rank(axis=\"rows\",method=\"first\",ascending=False).round(decimals=0)\n",
    "results[[\"Title\",\"Author\",\"Average Rating\",\"Log Reg Predicted Rating\",\"Log Reg Ranking\"]].groupby(\"Log Reg Ranking\").mean()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normal Linear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model = LinearRegression()\n",
    "model.fit(X_train,y_train)\n",
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.202042374268885"
      ]
     },
     "execution_count": 821,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error as mse \n",
    "from sklearn.metrics import mean_absolute_error as mae\n",
    "model.score(X_train,y_train)\n",
    "mae(y_test,y_pred)\n",
    "mse(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fiction': -1.5158847645493188,\n",
       " 'fantasy': -1.0476284530304076,\n",
       " 'french-literature': -0.6605309241462719,\n",
       " 'self-improvement': -0.2698347758691129,\n",
       " 'psychology': -0.1756111619482271,\n",
       " 'history': -0.11354678170864833,\n",
       " 'personal-development': -0.10700656670269795,\n",
       " 'self-development': -0.027819416050882107,\n",
       " 'philosophy': 0.060428316457336276,\n",
       " 'politics': 0.09918526002688302,\n",
       " 'science': 0.2631370244418874,\n",
       " 'business': 0.29895712815276543,\n",
       " 'nonfiction': 0.30493011127131286,\n",
       " 'economics': 0.3074500054442302,\n",
       " 'france': 0.43540395284711636,\n",
       " 'historical-fiction': 0.49435740043449933,\n",
       " 'classic': 0.5879239077402143,\n",
       " 'school': 0.6020355030386634,\n",
       " 'biography': 0.6585900053263887,\n",
       " 'Average Rating': 0.7540970460521472,\n",
       " 'self-help': 0.7745616733317213,\n",
       " 'literature': 0.8802664520378077,\n",
       " 'novels': 1.084455707457503,\n",
       " 'classics': 1.1120859073081188,\n",
       " 'french': 1.1418376670677086}"
      ]
     },
     "execution_count": 822,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeffs = dict(zip(X_train.columns,model.coef_))\n",
    "dict(sorted(coeffs.items(), key=lambda item: item[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Author l-f' 'Additional Authors' 'ISBN13' 'Bookshelves'\\n 'Bookshelves with positions' 'My Review' 'Spoiler' 'Private Notes'\\n 'Recommended For' 'Recommended By' 'Owned Copies'\\n 'Original Purchase Date' 'Original Purchase Location' 'Condition'\\n 'Condition Description' 'BCID'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-825-1cef694f1965>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnot_read\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbooks_read\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4161\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4162\u001b[0m         \"\"\"\n\u001b[0;32m-> 4163\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   4164\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4165\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3885\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3886\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3887\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3889\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3919\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3920\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3921\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3922\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3923\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5280\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5281\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5282\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5283\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5284\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['Author l-f' 'Additional Authors' 'ISBN13' 'Bookshelves'\\n 'Bookshelves with positions' 'My Review' 'Spoiler' 'Private Notes'\\n 'Recommended For' 'Recommended By' 'Owned Copies'\\n 'Original Purchase Date' 'Original Purchase Location' 'Condition'\\n 'Condition Description' 'BCID'] not found in axis\""
     ]
    }
   ],
   "source": [
    "not_read[books_read.drop(drop_columns, axis=\"columns\").columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_for_predict[\"Year Published\"].fillna(\"0\",inplace=True)\n",
    "#X_for_predict[\"Number of Pages\"].fillna(\"0\",inplace=True)\n",
    "#X_for_predict[\"Original Publication Year\"].fillna(\"0\",inplace=True)\n",
    "X_for_predict = not_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 827,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors = model.predict(X_for_predict[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 828,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors = pd.DataFrame(predictors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 829,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors = predictors.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 830,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = results.merge(predictors, on=\"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "results[\"Lin Reg Predicted Rating\"] = results[\"0_y\"] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Wrong number of items passed 651, placement implies 1",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2894\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2895\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Lin Reg Ranking'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_set_item\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3573\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3574\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3575\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2897\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2898\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Lin Reg Ranking'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-845-3f7c751fefc3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Lin Reg Ranking\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Lin Reg Predicted Rating\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"rows\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"first\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mascending\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3038\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3039\u001b[0m             \u001b[0;31m# set column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3040\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_item\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_setitem_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_set_item\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3115\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ensure_valid_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3116\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sanitize_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3117\u001b[0;31m         \u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_item\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3119\u001b[0m         \u001b[0;31m# check if we are modifying a copy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_set_item\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   3575\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3576\u001b[0m             \u001b[0;31m# This item wasn't present, just insert at end\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3577\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3578\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3579\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36minsert\u001b[0;34m(self, loc, item, value, allow_duplicates)\u001b[0m\n\u001b[1;32m   1187\u001b[0m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_safe_reshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1189\u001b[0;31m         \u001b[0mblock\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_block\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1190\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1191\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mblkno\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcount\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_fast_count_smallints\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblknos\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mmake_block\u001b[0;34m(values, placement, klass, ndim, dtype)\u001b[0m\n\u001b[1;32m   2720\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDatetimeArray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_simple_new\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2721\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2722\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplacement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2723\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2724\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, values, placement, ndim)\u001b[0m\n\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_ndim\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmgr_locs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 130\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    131\u001b[0m                 \u001b[0;34mf\"Wrong number of items passed {len(self.values)}, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m                 \u001b[0;34mf\"placement implies {len(self.mgr_locs)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Wrong number of items passed 651, placement implies 1"
     ]
    }
   ],
   "source": [
    "results[\"Lin Reg Ranking\"] = results.groupby(\"Lin Reg Predicted Rating\").mean().rank(axis=\"rows\",method=\"first\",ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 839,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Author</th>\n",
       "      <th>Average Rating</th>\n",
       "      <th>Lin Reg Predicted Rating</th>\n",
       "      <th>Log Reg Ranking</th>\n",
       "      <th>Log Reg Predicted Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>La nuit sera calme</td>\n",
       "      <td>Romain Gary</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.102451</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fooled by Randomness: The Hidden Role of Chanc...</td>\n",
       "      <td>Nassim Nicholas Taleb</td>\n",
       "      <td>4.07</td>\n",
       "      <td>5.096415</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>War: How Conflict Shaped Us</td>\n",
       "      <td>Margaret MacMillan</td>\n",
       "      <td>3.57</td>\n",
       "      <td>5.530445</td>\n",
       "      <td>41.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Eat That Frog!: 21 Great Ways to Stop Procrast...</td>\n",
       "      <td>Brian Tracy</td>\n",
       "      <td>3.87</td>\n",
       "      <td>4.448164</td>\n",
       "      <td>40.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Essentialism: The Disciplined Pursuit of Less</td>\n",
       "      <td>Greg McKeown</td>\n",
       "      <td>4.03</td>\n",
       "      <td>4.993188</td>\n",
       "      <td>39.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>The Drunkard's Walk: How Randomness Rules Our ...</td>\n",
       "      <td>Leonard Mlodinow</td>\n",
       "      <td>3.93</td>\n",
       "      <td>4.524928</td>\n",
       "      <td>36.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Naked Economics: Undressing the Dismal Science</td>\n",
       "      <td>Charles Wheelan</td>\n",
       "      <td>4.04</td>\n",
       "      <td>5.149303</td>\n",
       "      <td>35.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Meditations</td>\n",
       "      <td>Marcus Aurelius</td>\n",
       "      <td>4.22</td>\n",
       "      <td>6.049530</td>\n",
       "      <td>32.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>The Richest Man in Babylon</td>\n",
       "      <td>George S. Clason</td>\n",
       "      <td>4.26</td>\n",
       "      <td>4.619432</td>\n",
       "      <td>31.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>A Monk's Guide to Happiness: Meditation in the...</td>\n",
       "      <td>Gelong Thubten</td>\n",
       "      <td>4.24</td>\n",
       "      <td>5.522904</td>\n",
       "      <td>30.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>The Almanack of Naval Ravikant: A Guide to Wea...</td>\n",
       "      <td>Eric Jorgenson</td>\n",
       "      <td>4.61</td>\n",
       "      <td>4.438448</td>\n",
       "      <td>28.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Thinking in Systems: A Primer</td>\n",
       "      <td>Donella H. Meadows</td>\n",
       "      <td>4.26</td>\n",
       "      <td>5.613726</td>\n",
       "      <td>27.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Libraries of the Future</td>\n",
       "      <td>J.C.R. Licklider</td>\n",
       "      <td>4.42</td>\n",
       "      <td>4.378975</td>\n",
       "      <td>26.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>The Kraus Project: Essays by Karl Kraus</td>\n",
       "      <td>Jonathan Franzen</td>\n",
       "      <td>3.37</td>\n",
       "      <td>4.437646</td>\n",
       "      <td>23.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Foucault's Pendulum</td>\n",
       "      <td>Umberto Eco</td>\n",
       "      <td>3.90</td>\n",
       "      <td>4.529256</td>\n",
       "      <td>22.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>The Art of Possibility</td>\n",
       "      <td>Benjamin Zander</td>\n",
       "      <td>0.00</td>\n",
       "      <td>4.545668</td>\n",
       "      <td>21.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Incompleteness: The Proof and Paradox of Kurt ...</td>\n",
       "      <td>Rebecca Goldstein</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.513858</td>\n",
       "      <td>19.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Billy Liar / The Loneliness of the Long-Distan...</td>\n",
       "      <td>Keith Waterhouse</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.832481</td>\n",
       "      <td>14.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Designing Data Visualizations: Representing In...</td>\n",
       "      <td>Noah Iliinsky</td>\n",
       "      <td>3.22</td>\n",
       "      <td>5.194448</td>\n",
       "      <td>12.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AI Superpowers: China, Silicon Valley, and the...</td>\n",
       "      <td>Kai-Fu Lee</td>\n",
       "      <td>4.15</td>\n",
       "      <td>4.410459</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>The Lucifer Effect: Understanding How Good Peo...</td>\n",
       "      <td>Philip G. Zimbardo</td>\n",
       "      <td>3.91</td>\n",
       "      <td>4.568819</td>\n",
       "      <td>9.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Life Is What You Make It: Find Your Own Path t...</td>\n",
       "      <td>Peter Buffett</td>\n",
       "      <td>3.78</td>\n",
       "      <td>5.247335</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>The Shallows: What the Internet Is Doing to Ou...</td>\n",
       "      <td>Nicholas Carr</td>\n",
       "      <td>3.89</td>\n",
       "      <td>5.643560</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Good Authority: How to Become the Leader Your ...</td>\n",
       "      <td>Jonathan Raymond</td>\n",
       "      <td>4.08</td>\n",
       "      <td>6.200349</td>\n",
       "      <td>42.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>A Practical Guide for Policy Analysis: The Eig...</td>\n",
       "      <td>Eugene Bardach</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.119831</td>\n",
       "      <td>47.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>How Will You Measure Your Life?</td>\n",
       "      <td>Clayton M. Christensen</td>\n",
       "      <td>4.07</td>\n",
       "      <td>5.362308</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Title                  Author  \\\n",
       "3                                  La nuit sera calme             Romain Gary   \n",
       "4   Fooled by Randomness: The Hidden Role of Chanc...   Nassim Nicholas Taleb   \n",
       "59                        War: How Conflict Shaped Us      Margaret MacMillan   \n",
       "57  Eat That Frog!: 21 Great Ways to Stop Procrast...             Brian Tracy   \n",
       "55      Essentialism: The Disciplined Pursuit of Less            Greg McKeown   \n",
       "48  The Drunkard's Walk: How Randomness Rules Our ...        Leonard Mlodinow   \n",
       "47     Naked Economics: Undressing the Dismal Science         Charles Wheelan   \n",
       "42                                        Meditations         Marcus Aurelius   \n",
       "41                         The Richest Man in Babylon        George S. Clason   \n",
       "40  A Monk's Guide to Happiness: Meditation in the...          Gelong Thubten   \n",
       "38  The Almanack of Naval Ravikant: A Guide to Wea...          Eric Jorgenson   \n",
       "37                      Thinking in Systems: A Primer      Donella H. Meadows   \n",
       "36                            Libraries of the Future        J.C.R. Licklider   \n",
       "33            The Kraus Project: Essays by Karl Kraus        Jonathan Franzen   \n",
       "32                                Foucault's Pendulum             Umberto Eco   \n",
       "31                             The Art of Possibility         Benjamin Zander   \n",
       "29  Incompleteness: The Proof and Paradox of Kurt ...       Rebecca Goldstein   \n",
       "16  Billy Liar / The Loneliness of the Long-Distan...        Keith Waterhouse   \n",
       "13  Designing Data Visualizations: Representing In...           Noah Iliinsky   \n",
       "10  AI Superpowers: China, Silicon Valley, and the...              Kai-Fu Lee   \n",
       "9   The Lucifer Effect: Understanding How Good Peo...      Philip G. Zimbardo   \n",
       "8   Life Is What You Make It: Find Your Own Path t...           Peter Buffett   \n",
       "5   The Shallows: What the Internet Is Doing to Ou...           Nicholas Carr   \n",
       "63  Good Authority: How to Become the Leader Your ...        Jonathan Raymond   \n",
       "17  A Practical Guide for Policy Analysis: The Eig...          Eugene Bardach   \n",
       "15                    How Will You Measure Your Life?  Clayton M. Christensen   \n",
       "\n",
       "    Average Rating  Lin Reg Predicted Rating  Log Reg Ranking  \\\n",
       "3             4.05                  4.102451              3.0   \n",
       "4             4.07                  5.096415              4.0   \n",
       "59            3.57                  5.530445             41.0   \n",
       "57            3.87                  4.448164             40.0   \n",
       "55            4.03                  4.993188             39.0   \n",
       "48            3.93                  4.524928             36.0   \n",
       "47            4.04                  5.149303             35.0   \n",
       "42            4.22                  6.049530             32.0   \n",
       "41            4.26                  4.619432             31.0   \n",
       "40            4.24                  5.522904             30.0   \n",
       "38            4.61                  4.438448             28.0   \n",
       "37            4.26                  5.613726             27.0   \n",
       "36            4.42                  4.378975             26.0   \n",
       "33            3.37                  4.437646             23.0   \n",
       "32            3.90                  4.529256             22.0   \n",
       "31            0.00                  4.545668             21.0   \n",
       "29            4.00                  4.513858             19.0   \n",
       "16            4.00                  4.832481             14.0   \n",
       "13            3.22                  5.194448             12.0   \n",
       "10            4.15                  4.410459             10.0   \n",
       "9             3.91                  4.568819              9.0   \n",
       "8             3.78                  5.247335              8.0   \n",
       "5             3.89                  5.643560              5.0   \n",
       "63            4.08                  6.200349             42.0   \n",
       "17            3.57                  4.119831             47.0   \n",
       "15            4.07                  5.362308             46.0   \n",
       "\n",
       "    Log Reg Predicted Rating  \n",
       "3                          5  \n",
       "4                          5  \n",
       "59                         5  \n",
       "57                         5  \n",
       "55                         5  \n",
       "48                         5  \n",
       "47                         5  \n",
       "42                         5  \n",
       "41                         5  \n",
       "40                         5  \n",
       "38                         5  \n",
       "37                         5  \n",
       "36                         5  \n",
       "33                         5  \n",
       "32                         5  \n",
       "31                         5  \n",
       "29                         5  \n",
       "16                         5  \n",
       "13                         5  \n",
       "10                         5  \n",
       "9                          5  \n",
       "8                          5  \n",
       "5                          5  \n",
       "63                         5  \n",
       "17                         4  \n",
       "15                         4  "
      ]
     },
     "execution_count": 839,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "results[results[\"0_y\"]>4][[\"Title\",\"Author\",\"Average Rating\",\"Lin Reg Predicted Rating\", \"Log Reg Ranking\",\"Log Reg Predicted Rating\"]].sort_values(\"Log Reg Predicted Rating\",ascending=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "knn_model = KNeighborsRegressor(n_neighbors=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor()"
      ]
     },
     "execution_count": 511,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = knn_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.2, 2.6, 5. , 0. , 4.6, 4.2, 4. , 4.4, 0. , 3.8, 0. , 4.6, 4.2,\n",
       "       3.4, 2.4, 4.2, 1.8, 4.2, 0. , 4.6, 1.8, 0.6, 2.8, 3. , 3.2, 3.2,\n",
       "       2.4, 4. , 0. , 4.6, 3.4, 1.2, 3.6, 0. , 4.6, 4.2, 4. , 1. , 3. ,\n",
       "       1.8, 2.4, 0. , 0. , 2.2, 2.8, 1.4, 4.6, 5. , 4.8, 3.4, 3.8, 0. ,\n",
       "       4.4, 0. ])"
      ]
     },
     "execution_count": 514,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7235567627290305"
      ]
     },
     "execution_count": 516,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_model.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mse(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.925925925925926"
      ]
     },
     "execution_count": 518,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mae(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = knn_model.predict(X_for_predict[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = pd.DataFrame(predictors2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = predictors2.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "metadata": {},
   "outputs": [],
   "source": [
    "finale2 = not_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "metadata": {},
   "outputs": [],
   "source": [
    "results2 = finale2.merge(predictors2, on=\"index\").sort_values(by=0, ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "metadata": {},
   "outputs": [],
   "source": [
    "results2[\"Predicted Rating\"] = results2[0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Author</th>\n",
       "      <th>Average Rating</th>\n",
       "      <th>Predicted Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Eat That Frog!: 21 Great Ways to Stop Procrast...</td>\n",
       "      <td>Brian Tracy</td>\n",
       "      <td>3.87</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>La nuit sera calme</td>\n",
       "      <td>Romain Gary</td>\n",
       "      <td>4.05</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>The Shallows: What the Internet Is Doing to Ou...</td>\n",
       "      <td>Nicholas Carr</td>\n",
       "      <td>3.89</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Naked Economics: Undressing the Dismal Science</td>\n",
       "      <td>Charles Wheelan</td>\n",
       "      <td>4.04</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>The Great Mental Models: General Thinking Conc...</td>\n",
       "      <td>Shane Parrish</td>\n",
       "      <td>4.08</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Life Is What You Make It: Find Your Own Path t...</td>\n",
       "      <td>Peter Buffett</td>\n",
       "      <td>3.78</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AI Superpowers: China, Silicon Valley, and the...</td>\n",
       "      <td>Kai-Fu Lee</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Designing Data Visualizations: Representing In...</td>\n",
       "      <td>Noah Iliinsky</td>\n",
       "      <td>3.22</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Incompleteness: The Proof and Paradox of Kurt ...</td>\n",
       "      <td>Rebecca Goldstein</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>War: How Conflict Shaped Us</td>\n",
       "      <td>Margaret MacMillan</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Comeback Quotient: A Get-Real Guide to Bui...</td>\n",
       "      <td>Matt Fitzgerald</td>\n",
       "      <td>4.22</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>The Richest Man in Babylon</td>\n",
       "      <td>George S. Clason</td>\n",
       "      <td>4.26</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>A Monk's Guide to Happiness: Meditation in the...</td>\n",
       "      <td>Gelong Thubten</td>\n",
       "      <td>4.24</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>The Almanack of Naval Ravikant: A Guide to Wea...</td>\n",
       "      <td>Eric Jorgenson</td>\n",
       "      <td>4.61</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>The Kraus Project: Essays by Karl Kraus</td>\n",
       "      <td>Jonathan Franzen</td>\n",
       "      <td>3.37</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maybe You Should Talk to Someone: A Therapist,...</td>\n",
       "      <td>Lori Gottlieb</td>\n",
       "      <td>4.37</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>How Bad Do You Want It?: Mastering the Psychol...</td>\n",
       "      <td>Matt Fitzgerald</td>\n",
       "      <td>4.12</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>How Will You Measure Your Life?</td>\n",
       "      <td>Clayton M. Christensen</td>\n",
       "      <td>4.07</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Billy Liar / The Loneliness of the Long-Distan...</td>\n",
       "      <td>Keith Waterhouse</td>\n",
       "      <td>4.00</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>How to Be Alone</td>\n",
       "      <td>Jonathan Franzen</td>\n",
       "      <td>3.59</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fooled by Randomness: The Hidden Role of Chanc...</td>\n",
       "      <td>Nassim Nicholas Taleb</td>\n",
       "      <td>4.07</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Title                  Author  \\\n",
       "57  Eat That Frog!: 21 Great Ways to Stop Procrast...             Brian Tracy   \n",
       "3                                  La nuit sera calme             Romain Gary   \n",
       "5   The Shallows: What the Internet Is Doing to Ou...           Nicholas Carr   \n",
       "47     Naked Economics: Undressing the Dismal Science         Charles Wheelan   \n",
       "45  The Great Mental Models: General Thinking Conc...           Shane Parrish   \n",
       "8   Life Is What You Make It: Find Your Own Path t...           Peter Buffett   \n",
       "10  AI Superpowers: China, Silicon Valley, and the...              Kai-Fu Lee   \n",
       "13  Designing Data Visualizations: Representing In...           Noah Iliinsky   \n",
       "29  Incompleteness: The Proof and Paradox of Kurt ...       Rebecca Goldstein   \n",
       "59                        War: How Conflict Shaped Us      Margaret MacMillan   \n",
       "1   The Comeback Quotient: A Get-Real Guide to Bui...         Matt Fitzgerald   \n",
       "41                         The Richest Man in Babylon        George S. Clason   \n",
       "40  A Monk's Guide to Happiness: Meditation in the...          Gelong Thubten   \n",
       "38  The Almanack of Naval Ravikant: A Guide to Wea...          Eric Jorgenson   \n",
       "33            The Kraus Project: Essays by Karl Kraus        Jonathan Franzen   \n",
       "0   Maybe You Should Talk to Someone: A Therapist,...           Lori Gottlieb   \n",
       "2   How Bad Do You Want It?: Mastering the Psychol...         Matt Fitzgerald   \n",
       "15                    How Will You Measure Your Life?  Clayton M. Christensen   \n",
       "16  Billy Liar / The Loneliness of the Long-Distan...        Keith Waterhouse   \n",
       "14                                    How to Be Alone        Jonathan Franzen   \n",
       "4   Fooled by Randomness: The Hidden Role of Chanc...   Nassim Nicholas Taleb   \n",
       "\n",
       "    Average Rating  Predicted Rating  \n",
       "57            3.87               5.0  \n",
       "3             4.05               5.0  \n",
       "5             3.89               5.0  \n",
       "47            4.04               5.0  \n",
       "45            4.08               5.0  \n",
       "8             3.78               5.0  \n",
       "10            4.15               5.0  \n",
       "13            3.22               5.0  \n",
       "29            4.00               4.8  \n",
       "59            3.57               4.8  \n",
       "1             4.22               4.8  \n",
       "41            4.26               4.8  \n",
       "40            4.24               4.8  \n",
       "38            4.61               4.8  \n",
       "33            3.37               4.8  \n",
       "0             4.37               4.8  \n",
       "2             4.12               4.8  \n",
       "15            4.07               4.8  \n",
       "16            4.00               4.6  \n",
       "14            3.59               4.6  \n",
       "4             4.07               4.6  "
      ]
     },
     "execution_count": 530,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results2[results2[\"Predicted Rating\"]>4][[\"Title\",\"Author\",\"Average Rating\",\"Predicted Rating\"]].head(21)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## k Neighbours Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 538,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "k_scores=[]\n",
    "for k in range(1,31):\n",
    "    # 2. run KNeighborsClassifier with k neighbours\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    # 3. obtain cross_val_score for KNeighborsClassifier with k neighbours\n",
    "    scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='accuracy')\n",
    "    # 4. append mean of scores for k neighbors to k_scores list\n",
    "    k_scores.append(scores.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=8)"
      ]
     },
     "execution_count": 547,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=8)\n",
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = knn_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6415094339622641"
      ]
     },
     "execution_count": 549,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = knn.predict(X_for_predict[['self-development', 'school', 'fantasy', 'economics', 'biography',\n",
    "       'france', 'french-literature', 'personal-development',\n",
    "       'historical-fiction', 'self-improvement', 'politics', 'science',\n",
    "       'self-help', 'history', 'french', 'business', 'novels', 'psychology',\n",
    "       'philosophy', 'classic', 'literature', 'classics', 'fiction',\n",
    "       'nonfiction', 'Average Rating']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 558,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = pd.DataFrame(predictors2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 559,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictors2 = predictors2.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 560,
   "metadata": {},
   "outputs": [],
   "source": [
    "finale2 = not_read"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "metadata": {},
   "outputs": [],
   "source": [
    "results2 = finale2.merge(predictors2, on=\"index\").sort_values(by=0, ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "metadata": {},
   "outputs": [],
   "source": [
    "results2[\"Predicted Rating\"] = results2[0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Author</th>\n",
       "      <th>Average Rating</th>\n",
       "      <th>Predicted Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maybe You Should Talk to Someone: A Therapist,...</td>\n",
       "      <td>Lori Gottlieb</td>\n",
       "      <td>4.37</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>A Monk's Guide to Happiness: Meditation in the...</td>\n",
       "      <td>Gelong Thubten</td>\n",
       "      <td>4.24</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Plato at the Googleplex: Why Philosophy Won't ...</td>\n",
       "      <td>Rebecca Goldstein</td>\n",
       "      <td>3.86</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>The Kraus Project: Essays by Karl Kraus</td>\n",
       "      <td>Jonathan Franzen</td>\n",
       "      <td>3.37</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>An Introduction to Political Philosophy: Ten E...</td>\n",
       "      <td>Leo Strauss</td>\n",
       "      <td>4.26</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Libraries of the Future</td>\n",
       "      <td>J.C.R. Licklider</td>\n",
       "      <td>4.42</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Thinking in Systems: A Primer</td>\n",
       "      <td>Donella H. Meadows</td>\n",
       "      <td>4.26</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>The Almanack of Naval Ravikant: A Guide to Wea...</td>\n",
       "      <td>Eric Jorgenson</td>\n",
       "      <td>4.61</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Breath: The New Science of a Lost Art</td>\n",
       "      <td>James Nestor</td>\n",
       "      <td>4.15</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>The Richest Man in Babylon</td>\n",
       "      <td>George S. Clason</td>\n",
       "      <td>4.26</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>The Educated Mind: How Cognitive Tools Shape O...</td>\n",
       "      <td>Kieran Egan</td>\n",
       "      <td>4.18</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Meditations</td>\n",
       "      <td>Marcus Aurelius</td>\n",
       "      <td>4.22</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>The Great Mental Models: General Thinking Conc...</td>\n",
       "      <td>Shane Parrish</td>\n",
       "      <td>4.08</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Naked Economics: Undressing the Dismal Science</td>\n",
       "      <td>Charles Wheelan</td>\n",
       "      <td>4.04</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Comeback Quotient: A Get-Real Guide to Bui...</td>\n",
       "      <td>Matt Fitzgerald</td>\n",
       "      <td>4.22</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>War: How Conflict Shaped Us</td>\n",
       "      <td>Margaret MacMillan</td>\n",
       "      <td>3.57</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Good Authority: How to Become the Leader Your ...</td>\n",
       "      <td>Jonathan Raymond</td>\n",
       "      <td>4.08</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>One Day in the Life of Ivan Denisovich</td>\n",
       "      <td>Aleksandr Solzhenitsyn</td>\n",
       "      <td>3.96</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Incompleteness: The Proof and Paradox of Kurt ...</td>\n",
       "      <td>Rebecca Goldstein</td>\n",
       "      <td>4.00</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Eat That Frog!: 21 Great Ways to Stop Procrast...</td>\n",
       "      <td>Brian Tracy</td>\n",
       "      <td>3.87</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Life Is What You Make It: Find Your Own Path t...</td>\n",
       "      <td>Peter Buffett</td>\n",
       "      <td>3.78</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Title  \\\n",
       "0    Maybe You Should Talk to Someone: A Therapist,...   \n",
       "40   A Monk's Guide to Happiness: Meditation in the...   \n",
       "30   Plato at the Googleplex: Why Philosophy Won't ...   \n",
       "33             The Kraus Project: Essays by Karl Kraus   \n",
       "35   An Introduction to Political Philosophy: Ten E...   \n",
       "36                             Libraries of the Future   \n",
       "37                       Thinking in Systems: A Primer   \n",
       "38   The Almanack of Naval Ravikant: A Guide to Wea...   \n",
       "39               Breath: The New Science of a Lost Art   \n",
       "41                          The Richest Man in Babylon   \n",
       "19   The Educated Mind: How Cognitive Tools Shape O...   \n",
       "42                                         Meditations   \n",
       "45   The Great Mental Models: General Thinking Conc...   \n",
       "47      Naked Economics: Undressing the Dismal Science   \n",
       "1    The Comeback Quotient: A Get-Real Guide to Bui...   \n",
       "59                         War: How Conflict Shaped Us   \n",
       "63   Good Authority: How to Become the Leader Your ...   \n",
       "102             One Day in the Life of Ivan Denisovich   \n",
       "29   Incompleteness: The Proof and Paradox of Kurt ...   \n",
       "57   Eat That Frog!: 21 Great Ways to Stop Procrast...   \n",
       "8    Life Is What You Make It: Find Your Own Path t...   \n",
       "\n",
       "                     Author  Average Rating  Predicted Rating  \n",
       "0             Lori Gottlieb            4.37                 5  \n",
       "40           Gelong Thubten            4.24                 5  \n",
       "30        Rebecca Goldstein            3.86                 5  \n",
       "33         Jonathan Franzen            3.37                 5  \n",
       "35              Leo Strauss            4.26                 5  \n",
       "36         J.C.R. Licklider            4.42                 5  \n",
       "37       Donella H. Meadows            4.26                 5  \n",
       "38           Eric Jorgenson            4.61                 5  \n",
       "39             James Nestor            4.15                 5  \n",
       "41         George S. Clason            4.26                 5  \n",
       "19              Kieran Egan            4.18                 5  \n",
       "42          Marcus Aurelius            4.22                 5  \n",
       "45            Shane Parrish            4.08                 5  \n",
       "47          Charles Wheelan            4.04                 5  \n",
       "1           Matt Fitzgerald            4.22                 5  \n",
       "59       Margaret MacMillan            3.57                 5  \n",
       "63         Jonathan Raymond            4.08                 5  \n",
       "102  Aleksandr Solzhenitsyn            3.96                 5  \n",
       "29        Rebecca Goldstein            4.00                 5  \n",
       "57              Brian Tracy            3.87                 5  \n",
       "8             Peter Buffett            3.78                 5  "
      ]
     },
     "execution_count": 563,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results2[results2[\"Predicted Rating\"]>4][[\"Title\",\"Author\",\"Average Rating\",\"Predicted Rating\"]].head(21)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
